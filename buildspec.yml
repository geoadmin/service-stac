version: 0.2

env:
  shell: bash
  variables:
    IMAGE_BASE_NAME: "service-stac"
    REGISTRY: "974517877189.dkr.ecr.eu-central-1.amazonaws.com"
    SHELL: /bin/bash
    AWS_DEFAULT_REGION: eu-central-1
    USER: "aws_code_build"
    ENV: "dev"
    PIPENV_NOSPIN: 1

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo "Installing necessary dependencies"
      - apt-get update
      - apt-get install -y gdal-bin
      - aws --version
      - echo "Login to AWS ECR docker registry"
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
  pre_build:
    commands:
      - echo "export of the image tag for build and push purposes"
      - echo "CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF} CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}"
      - export GITHUB_BRANCH="${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/}"
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export GIT_TAG="$(git describe --tags || echo 'no version info')"
      - echo "GITHUB_BRANCH=${GITHUB_BRANCH} COMMIT_HASH=${COMMIT_HASH} GIT_TAG=${GIT_TAG}"
      - echo "creating a clean environment"
      - make ci
      - echo "checking code formatting"
      - make ci-check-format
      - echo "linting code"
      - make lint
      - echo "linting specs"
      - make lint-specs

  build:
    commands:
      - |-
        if [ "${GIT_TAG}" = "undefined" ] ; then
          DOCKER_IMG_TAG="${REGISTRY}/${IMAGE_BASE_NAME}:${GITHUB_BRANCH//\//_}.${COMMIT_HASH}"
        else
          DOCKER_IMG_TAG="${REGISTRY}/${IMAGE_BASE_NAME}:${GIT_TAG}"
        fi
      - export DOCKER_IMG_TAG=${DOCKER_IMG_TAG}
      - export DOCKER_IMG_TAG_DEV="${DOCKER_IMG_TAG}-dev"
      - export DOCKER_IMG_TAG_LATEST="${REGISTRY}/${IMAGE_BASE_NAME}:${GITHUB_BRANCH//\//_}.latest"
      - export DOCKER_IMG_TAG_LATEST_DEV="${REGISTRY}/${IMAGE_BASE_NAME}:${GITHUB_BRANCH//\//_}.latest-dev"
      # Starting dev build for testing
      - echo "starting debug build on $(date)"
      - echo "Building docker debug image with tags ${DOCKER_IMG_TAG} and ${DOCKER_IMG_TAG_LATEST_DEV}"
      - >
        docker build
        --build-arg GIT_HASH="${COMMIT_HASH}"
        --build-arg GIT_BRANCH="${GITHUB_BRANCH}"
        --build-arg AUTHOR="CI"
        --build-arg VERSION="${GIT_TAG}"
        -t "${DOCKER_IMG_TAG_DEV}" -t "${DOCKER_IMG_TAG_LATEST_DEV}" --target debug .
      # Running tests
      # Note: the app container will 'exit 0' once tests are completed, we need to
      # stop the db as well then
      - docker-compose -f docker-compose-ci.yml up --abort-on-container-exit
      # Starting prod build
      - echo "starting production build on $(date)"
      - echo "Building docker production image with tags ${DOCKER_IMG_TAG} and ${DOCKER_IMG_TAG_LATEST}"
      - >
        docker build
        --build-arg GIT_HASH="${COMMIT_HASH}"
        --build-arg GIT_BRANCH="${GITHUB_BRANCH}"
        --build-arg AUTHOR="CI"
        --build-arg VERSION="${GIT_TAG}"
        -t "${DOCKER_IMG_TAG}" -t "${DOCKER_IMG_TAG_LATEST}" --target production .

  post_build:
    commands:
      # Only push images built from develop and master to dockerhub
      - |
        if [ "${GITHUB_BRANCH}" = "master" ] || [ "${GITHUB_BRANCH}" = "develop" ]; then
          echo "Push production image ${DOCKER_IMG_TAG}"
          docker push ${DOCKER_IMG_TAG}
          echo "Push debug image ${DOCKER_IMG_TAG_DEV}"
          docker push ${DOCKER_IMG_TAG_DEV}
        fi
      # For develop aditionally push images with '*latest*' tags
      - |-
        if [ "${GITHUB_BRANCH}" = "develop" ]; then
          echo "Push production image ${DOCKER_IMG_TAG_LATEST}"
          docker push ${DOCKER_IMG_TAG_LATEST}
          echo "Push debug image ${DOCKER_IMG_TAG_LATEST_DEV}"
          docker push ${DOCKER_IMG_TAG_LATEST_DEV}
        fi
