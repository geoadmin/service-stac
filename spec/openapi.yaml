openapi: 3.0.1
info:
  contact:
    name: API Specification (based on STAC)
    url: http://data.geo.admin.ch/api/stac/v0.9/
  description: >-
    This is an OpenAPI definition of the API to query and access federal geodata on
    data.geo.admin.ch. The API is based on the core SpatioTemporal Asset Catalog API specification
    [STAC](http://stacspec.org) and adds two extensions for extended searching possibilities.
  title: The SpatioTemporal Asset Catalog API for data.geo.admin.ch
  version: 0.9.0
servers:
  - description: Data.geo.admin.ch
    url: http://data.geo.admin.ch/api/stac/v0.9
tags:
  - description: Essential characteristics of this API
    name: Capabilities
  - description: Access to data (features)
    name: Data
  - description: Extension to OGC API - Features to support STAC metadata model and search API
    name: STAC

paths:
  /:
    get:
      description: >-
        The landing page provides links to the API definition, the conformance
        statements and to the feature collections in this dataset.
      operationId: getLandingPage
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/LandingPage"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Landing page
      tags:
        - Capabilities
  /collections:
    get:
      operationId: getCollections
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/limit"
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/Collections"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Fetch collections
      description: The feature collections in the dataset
      tags:
        - Data
  /collections/{collectionId}:
    get:
      operationId: describeCollection
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/collectionId"
        - $ref: "./components/parameters.yaml#/components/parameters/IfMatch"
        - $ref: "./components/parameters.yaml#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/Collection"
        "304":
          $ref: "./components/responses.yaml#/components/responses/NotModified"
        "404":
          $ref: "./components/responses.yaml#/components/responses/NotFound"
        "412":
          $ref: "./components/responses.yaml#/components/responses/PreconditionFailed"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Fetch a single collection
      description: Describe the feature collection with id `collectionId`
      tags:
        - Data
  /collections/{collectionId}/items:
    get:
      description: >-
        Fetch features of the feature collection with id `collectionId`.


        Every feature in a dataset belongs to a collection. A dataset may
        consist of multiple feature collections. A feature collection is often a
        collection of features of a similar type, based on a common schema.


        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeatures
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/collectionId"
        - $ref: "./components/parameters.yaml#/components/parameters/limit"
        - $ref: "./components/parameters.yaml#/components/parameters/bbox"
        - $ref: "./components/parameters.yaml#/components/parameters/datetime"
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/Features"
        "400":
          $ref: "./components/responses.yaml#/components/responses/InvalidParameter"
        "404":
          $ref: "./components/responses.yaml#/components/responses/NotFound"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Fetch features
      tags:
        - Data
  /collections/{collectionId}/items/{featureId}:
    get:
      description: >-
        Fetch the feature with id `featureId` in the feature collection
        with id `collectionId`.


        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeature
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/collectionId"
        - $ref: "./components/parameters.yaml#/components/parameters/featureId"
        - $ref: "./components/parameters.yaml#/components/parameters/IfMatch"
        - $ref: "./components/parameters.yaml#/components/parameters/IfNoneMatch"
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/Feature"
        "304":
          $ref: "./components/responses.yaml#/components/responses/NotModified"
        "404":
          $ref: "./components/responses.yaml#/components/responses/NotFound"
        "412":
          $ref: "./components/responses.yaml#/components/responses/PreconditionFailed"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Fetch a single feature
      tags:
        - Data

  /{assetObjectHref}:
    servers:
      - url: http://data.geo.admin.ch/
    parameters:
      - $ref: "./components/parameters.yaml#/components/parameters/assetObjectHref"
    get:
      tags:
        - Data
      summary: Fetch an asset object
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/IfNoneMatch"
      operationId: getAssetObject
      description: |
        Return an asset object

        ### Notes on Caching

        Asset objects are cached by default for 2 hours (7200 seconds). Depending on the
        update interval of an asset object (e.g. for frequently updated data)
        the `Cache-Control` header can be different, in special cases it can even be
        set to `no-cache` (e.g. for realtime data).

        All endpoints support the precondition headers `If-Match` and `If-None-Match`.
        To reduce unnecessary traffic it's highly recommended to use these headers
        (mostly `If-None-Match`) when making calls.

        In case your application is using frequently updated data and you want to
        be sure not to miss an update of the data, the recommended procedure is as
        follows:

        ```python
        import requests
        import time

        refresh_interval = 60

        item_etag = "*"
        item_url = "https://data.geo.admin.ch/collections/{collectionID}/items/{itemId}"

        asset_id = 'data.json'
        asset_etag = "*"

        poll_for_new_data = True

        while(poll_for_new_data):
          item_response = requests.get(item_url, headers={'If-None-Match': f'"{item_etag}"'})
          if item_response.status_code == 304:
            # item metadata and hence any associated asset object didn't
            # change since last call

            time.sleep(refresh_interval)

          elif item_response.status_code == 200:
            # item metadata has changed since last visit

            item_etag = item_response.headers.get("ETag") # save the new etag
            asset_href = item_response.json['assets'][asset_id]['href'] # save the asset href

            obj_response = requests.get(asset_href, headers={'If-None-Match': f'"{asset_etag}"'})
            if obj_response.status_code == 304:
              # "our" asset object didn't change since last call,
              # we can ignore that the item metadata changed,
              # it was a different asset that has changed

              time.sleep(refresh_interval)

            elif obj_response.status_code == 200:
              # "our" asset object has changed, we load the new data

              asset_etag = obj_response.headers.get("ETag")  # save the new asset etag
              asset_checksum = obj_response.headers.get("X-Amz-Meta-Sha256")
              object = obj_response.data

              # calculate the sha256 checksum of the data in a proper way
              checksum = calc_checksum(object)
              if checksum != asset_checksum:
                # Error: corrupted data from download
                # do proper error handling

              # do sth with the data
            else:
              # do proper error handling
          else:
            # do proper error handling
        ```

      responses:
        "200":
          description: The asset object
          headers:
            ETag:
              $ref: "./headers.yaml#/components/headers/ETag"
            Cache-Control:
              description: |
                Cache header for the asset object
              example: "public, max-age=7200"
              schema:
                type: string
              required: true
            Content-Type:
              description: |
                The content type of the asset object as specified in the [asset object
                metadata](#tag/Data/operation/getFeature)
              required: true
              schema:
                type: string
        "304":
          $ref: "./components/responses.yaml#/components/responses/NotModified"
        "404":
          $ref: "./components/responses.yaml#/components/responses/NotFoundS3"
        "412":
          $ref: "./components/responses.yaml#/components/responses/PreconditionFailedS3"
    put:
      tags:
        - Asset Upload Management
      summary: Upload asset file part
      description: >-
        Upload an Asset file part using the presigned url(s) returned by
        [Create a new Asset's multipart upload](#operation/createAssetUpload).


        Parts that have been uploaded but not completed can be checked using
        [Get an Asset's multipart upload](#operation/getAssetUpload)


        A file part must be at least 5 MB except for the last one and at most 5 GB, otherwise the
        complete operation will fail.


        *Note: this endpoint doesn't require any authentication as it is already part of the
        presigned url*
      operationId: uploadAssetFilePart
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/assetObjectHref"
        - name: Content-MD5
          in: header
          description: The base64-encoded 128-bit MD5 digest of this part.
          required: true
          schema:
            type: string
            example: yLLiDqX2OL7mcIMTjob60A==
      responses:
        "200":
          description: Asset file part uploaded part successfully (Response has no content).
          content: {}
          headers:
            ETag:
              schema:
                type: string
              description: >-
                The RFC7232 ETag header field in a response provides the current entity-
                tag for the selected resource.


                This ETag is required in the complete multipart upload payload.


                An entity-tag is an opaque identifier for
                different versions of a resource over time, regardless whether multiple
                versions are valid at the same time. An entity-tag consists of an opaque
                quoted string.
              example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
              required: true
        "400":
          description: Asset file part corrupted.
          content:
            application/xml:
              schema:
                type: object
                required:
                  - Error
                properties:
                  Error:
                    type: object
                    required:
                      - Code
                      - Message
                    properties:
                      Code:
                        type: string
                        enum: ["BadDigest"]
                      Message:
                        type: string
                    additionalProperties:
                      type: string
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <Error>
                  <Code>BadDigest</Code>
                  <Message>The Content-MD5 you specified did not match what we received.</Message>
                  <ExpectedDigest>0b6vaU45Ys1BdrMhd4wnGA==</ExpectedDigest>
                  <CalculatedDigest>4lDYLoS0vNfNdko/3cPJJQ==</CalculatedDigest>
                  <RequestId>RAVFJXJQFXTCZHT3</RequestId>
                  <HostId>kDMsU45sQ4oZjkTgba2SNBy/0RMshW2lEWmfKnaotvViav5Qlyz4aSQdmS9FRVKp1HgJUBj3h5w=</HostId>
                </Error>
        "403":
          description: Asset file part upload Bad Request, Signature does not match (e.g. missing Content-MD5 header).
          content:
            application/xml:
              schema:
                type: object
                required:
                  - Error
                properties:
                  Error:
                    type: object
                    required:
                      - Code
                      - Message
                    properties:
                      Code:
                        type: string
                        enum: ["SignatureDoesNotMatch"]
                      Message:
                        type: string
                    additionalProperties:
                      type: string
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <Error>
                  <Code>SignatureDoesNotMatch</Code>
                  <Message>The request signature we calculated does not match the signature you provided. Check your key and signing method.</Message>
                  <AWSAccessKeyId>dummy-key</AWSAccessKeyId>
                  <StringToSign>
                    AWS4-HMAC-SHA256
                    20210922T110759Z
                    20210922/eu-central-1/s3/aws4_request6f0cf4c9a56acf90d9354cb79629a159c0c848ffacdbe13c7b9ae014671fa5c3
                  </StringToSign>
                  <SignatureProvided>1c762db1e677a6535c0e4a91015dcd60c00e58f1e5136f8943636f157dc03d54</SignatureProvided>
                  <StringToSignBytes>41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35...</StringToSignBytes>
                  <CanonicalRequest>
                    PUT /service-stac-dev/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID/test-e2e-asset-upload-UUID.txt
                      X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=...
                      content-md5:
                      host:s3.eu-central-1.amazonaws.com

                      content-md5;host
                      UNSIGNED-PAYLOAD
                  </CanonicalRequest>
                  <CanonicalRequestBytes>50 55 54 0a 2f 73...</CanonicalRequestBytes>
                  <RequestId>F5SB90RJFYE21C0V</RequestId>
                  <HostId>YnH6DNl93sXH5kL0nEk1TOhH+crwM+wnaRNhh7MNC6CW6XhAeJLKVV/WU+dsdRkJUzet5m7cZwU=</HostId>
                </Error>

  /conformance:
    get:
      description: >-
        A list of all conformance classes specified in a standard that the
        server conforms to.
      operationId: getConformanceDeclaration
      responses:
        "200":
          $ref: "./components/responses.yaml#/components/responses/ConformanceDeclaration"
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Information about specifications that this API conforms to
      tags:
        - Capabilities
  /search:
    get:
      description: >-
        Retrieve Items matching filters. Intended as a shorthand API for simple
        queries.

      operationId: getSearchSTAC
      parameters:
        - $ref: "./components/parameters.yaml#/components/parameters/bbox"
        - $ref: "./components/parameters.yaml#/components/parameters/datetime"
        - $ref: "./components/parameters.yaml#/components/parameters/limit"
        - $ref: "./components/parameters.yaml#/components/parameters/ids"
        - $ref: "./components/parameters.yaml#/components/parameters/collectionsArray"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "./components/schemas.yaml#/components/schemas/itemsSearchGet"
          description: A feature collection.
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Search STAC items with simple filtering.
      tags:
        - STAC
    post:
      description: >-
        Retrieve items matching filters. Intended as the standard, full-featured
        query API.

      operationId: postSearchSTAC
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./components/schemas.yaml#/components/schemas/searchBody"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "./components/schemas.yaml#/components/schemas/itemsSearchPost"
          description: A feature collection.
        "500":
          $ref: "./components/responses.yaml#/components/responses/ServerError"
      summary: Search STAC items with full-featured filtering.
      tags:
        - STAC
