openapi: 3.0.3
tags:
  - name: Capabilities
  - name: Data
  - name: STAC
  - name: Data Management
    description: |
      Metadata management requests. Theses requests are used to create, update or delete the STAC
      metadata.

      *NOTE: these requests require authentication as described in [here](#tag/Authentication).*

      ## Supported Media Type

      List of the current supported media types:

      | Media Type | Description | File Extension(s) |
      | ---------- | ----------- | ----------------- |
      | application/x.ascii-grid+zip | Zipped ESRI ASCII raster format (.asc) | .zip |
      | application/x.ascii-xyz+zip | Zipped XYZ (.xyz) | .zip |
      | application/x.e00+zip | Zipped e00 | .zip |
      | application/x.geotiff+zip | Zipped GeoTIFF | .zip |
      | image/tiff; application=geotiff | GeoTIFF | .tiff, .tif |
      | application/x.tiff+zip | Zipped TIFF | .zip |
      | application/x.png+zip | Zipped PNG | .zip |
      | application/x.jpeg+zip | Zipped JPEG | .zip |
      | application/vnd.google-earth.kml+xml | KML | .kml |
      | application/vnd.google-earth.kmz | Zipped KML | .kmz |
      | application/x.dxf+zip | Zipped DXF | .zip |
      | application/gml+xml | GML | .gml, .xml |
      | application/x.gml+zip | Zipped GML | .zip |
      | application/vnd.las | LIDAR | .las |
      | application/vnd.laszip | Zipped LIDAR | .laz, .zip |
      | application/x.shapefile+zip | Zipped Shapefile | .zip |
      | application/x.filegdb+zip | Zipped File Geodatabase | .zip |
      | application/x.filegdbp+zip | Zipped File Geodatabase (ArcGIS Pro) | .zip |
      | application/x.ms-access+zip | Zipped Personal Geodatabase | .zip |
      | application/x.ms-excel+zip | Zipped Excel | .zip |
      | application/x.tab+zip | Zipped Mapinfo-TAB | .zip |
      | application/x.tab-raster+zip | Zipped Mapinfo-Raster-TAB | .zip |
      | application/x.csv+zip | Zipped CSV | .zip |
      | text/csv | CSV | .csv |
      | application/geopackage+sqlite3 | Geopackage | .gpkg |
      | application/x.geopackage+zip | Zipped Geopackage | .zip |
      | application/geo+json | GeoJSON (<span style="color: red">does not support auto HTTP compression !</span>) | .json, .geojson |
      | application/x.geojson+zip | Zipped GeoJSON | .zip |
      | application/x.interlis; version=2.3 | Interlis 2 | .xtf, .xml |
      | application/x.interlis+zip; version=2.3 | Zipped XTF (2.3) | .zip |
      | application/x.interlis; version=1 | Interlis 1 | .itf |
      | application/x.interlis+zip; version=1 | Zipped ITF | .zip |
      | image/tiff; application=geotiff; profile=cloud-optimized | Cloud Optimized GeoTIFF (COG) | .tiff, .tif |`
      | application/pdf | PDF | .pdf |
      | application/x.pdf+zip | Zipped PDF | .zip |
      | application/json | JSON | .json |
      | application/x.json+zip | Zipped JSON | .zip |
      | application/x-netcdf | NetCDF | .nc |
      | application/x.netcdf+zip | Zipped NetCDF | .zip |
      | application/xml | XML | .xml |
      | application/x.xml+zip | Zipped XML | .zip |
      | application/vnd.mapbox-vector-tile | mbtiles | .mbtiles |
      | text/plain | Text | .txt |
      | text/x.plain+zip | Zipped text | .zip |
      | application/x.dwg+zip | Zipped DWG | .zip |
      | application/zip | Generic Zip File | .zip |
      | image/tiff | TIFF | .tiff, .tif |
      | image/jpeg | JPEG | .jpeg, .jpg |
      | image/png | PNG | .png |
      | application/vnd.sqlite3 | sqlite | .sqlite |

  - name: Asset Upload Management
    description: |
      Asset files are uploaded via the STAC API using the API requests described in this chapter.

      - [Authentication](#section/Authentication)
      - [Compression](#section/Compression)
      - [Example](#section/Example)

      <span style="color:red">***IMPORTANT NOTES:***</span>
        - <span style="color:red">*Files bigger than 10 MB should use compression,
          see [Compression](#section/Compression)*</span>


      ## Authentication

      POST/PUT requests require authentication as described in [here](#tag/Authentication).

      ## Compression

      Files between *1 MB* and *10 MB* are automatically compressed during download using *gzip* or
      *br* based on the `Accept-Encoding` header of the request. But note that this compression is
      only done for standard Media Type (see [File types that CloudFront compresses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront-file-types)).

      <span style="color: red">It is highly recommended to upload files bigger than *10 MB* using
      a compressed media type (see [Supported Media Type](#section/Supported-Media-Type)) !
      If this not possible (as e.g. for json directly usd in a browser application), the file should
      be either compressed upfront (see below) or split in smaller files.</span>

      ### Upfront Compression using `content_encoding`

      In the case where you have a file bigger than 10 MB that you can't split into multiple files
      or pack into a compressed media type, then you can use the upfront compression method together
      with the `content_encoding` parameter.

      For this you need to first compress the file using gzip or br compression algorithm and then
      use the `content_encoding` parameter in the [Create Asset's multipart upload](#tag/Asset-Upload-Management/operation/createAssetUpload)

      ***NOTES:***
       - In this case the file will be always delivered compressed, which means that the client that
       download the file needs to be compatible with the HTTP Compression algorithm defined in
       `Content-Encoding` header.


      ## Example

      ```python
      import os
      import hashlib
      from base64 import b64encode

      import requests
      import multihash

      # variables
      scheme = 'https'
      hostname = 'data.geo.admin.ch'
      collection = 'ch.swisstopo.pixelkarte-farbe-pk200.noscale'
      item = 'smr200-200-4-2016'
      asset = 'smr200-200-4-2016-2056-kgrs-10.tiff'
      asset_path = f'collections/{collection}/items/{item}/assets/{asset}'
      user = os.environ.get('STAC_USER', 'unknown-user')
      password = os.environ.get('STAC_PASSWORD', 'unknown-password')

      with open('smr200-200-4-2016-2056-kgrs-10.tiff', 'rb') as fd:
        data = fd.read()

      checksum_multihash = multihash.to_hex_string(multihash.encode(hashlib.sha256(data).digest(), 'sha2-256'))
      md5 = b64encode(hashlib.md5(data).digest()).decode('utf-8')

      # 1. Create a multipart upload
      response = requests.post(
        f"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads",
        auth=(user, password),
        json={
          "number_parts": 1,
          "md5_parts": [{
            "part_number": 1,
            "md5": md5
          }],
          "checksum:multihash": checksum_multihash
        }
      )
      upload_id = response.json()['upload_id']

      # 2. Upload the part using the presigned url
      response = requests.put(response.json()['urls'][0]['url'], data=data, headers={'Content-MD5': md5})
      etag = response.headers['ETag']

      # 3. Complete the upload
      response = requests.post(
        f"{scheme}://{hostname}/api/stac/v0.9/{asset_path}/uploads/{upload_id}/complete",
        auth=(user, password),
        json={'parts': [{'etag': etag, 'part_number': 1}]}
      )
      ```

      See https://aws.amazon.com/premiumsupport/knowledge-center/data-integrity-s3/ for other examples on how to compute the base64 MD5 of a part.
  - name: Authentication
    description: |
      All write requests require authentication. There is currently three type of supported authentications:

      * [Session authentication](#section/Session-authentication)
      * [Basic authentication](#section/Basic-authentication)
      * [Token authentication](#section/Token-authentication)

      ## Session authentication

      When using the browsable API the user can simply use the admin interface for logging in.
      Once logged in, the browsable API can be used to perform write requests.

      ## Basic authentication

      The username and password for authentication can be added to every write request the user wants to perform.
      Here is an example of posting an asset using curl (_username_="MickeyMouse", _password_="I_love_Minnie_Mouse"):

      ```
      curl --request POST \
        --user MickeyMouse:I_love_Minnie_Mouse \
        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
        --header 'Content-Type: application/json' \
        --data '{
          "id": "fancy_unique_id",
          "item": "swisstlmregio-2020",
          "title": "My title",
          "type": "application/x.filegdb+zip",
          "description": "My description",
          "proj:epsg": 2056,
          "checksum:multihash": "12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC"
      }'
      ```

      ## Token authentication

      A user specific token for authentication can be added to every write request the user wants to perform.
      Here is an example of posting an asset using curl:

      ```
      curl --request POST \
        --url https://data.geoadmin.ch/api/stac/v0.9/collections/ch.swisstopo.swisstlmregio/items/swisstlmregio-2020/assets \
        --header 'Authorization: Token ccecf40693bfc52ba090cd46eb7f19e723fe831f' \
        --header 'Content-Type: application/json' \
        --data '{
          "id": "fancy_unique_id",
          "item": "swisstlmregio-2020",
          "title": "My title",
          "type": "application/x.filegdb+zip",
          "description": "My description",
          "proj:epsg": 2056,
          "checksum:multihash": "12200ADEC47F803A8CF1055ED36750B3BA573C79A3AF7DA6D6F5A2AED03EA16AF3BC"
      }'
      ```

      Tokens can either be generated in the admin interface or existing users can perform a POST request
      on the get-token endpoint to request a token (also see [Request token for token authentication](#operation/getToken)).
      Here is an example using curl:

      ```
      curl --request POST \
        --url https://data.geoadmin.ch/api/stac/get-token \
        --header 'Content-Type: application/json' \
        --data '{"username": "MickeyMouse", "password": "I_love_Minnie_Mouse"}'
      ```
