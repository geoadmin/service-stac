openapi: 3.0.1
info:
  contact:
    name: API Specification (based on STAC)
    url: http://data.geo.admin.ch/api/stac/v0.9/
  description: "This is an OpenAPI definition of the API to query and access federal
    geodata on \ndata.geo.admin.ch. The API is based on the core SpatioTemporal Asset
    Catalog API\nspecification [STAC](http://stacspec.org) and adds two extensions
    for extended \nsearching possibilities.\n\n\n**Note:** The API is _not_ productively
    accessible yet, this is a preliminary outlook of\nhow it will look like. Minor
    changes are possible and will be reflected in this document."
  title: The SpatioTemporal Asset Catalog API for data.geo.admin.ch
  version: 0.9.0
servers:
- description: Data.geo.admin.ch
  url: http://data.geo.admin.ch/api/stac/v0.9
tags:
- description: essential characteristics of this API
  name: Capabilities
- description: access to data (features)
  name: Data
- description: Extension to OGC API - Features to support STAC metadata model and
    search API
  name: STAC
components:
  parameters:
    assetQuery:
      description: query for properties in assets (e.g. mediatype). Use the JSON form
        of the assetQueryFilter used in POST.
      in: query
      name: assetQuery
      required: false
      schema:
        type: string
    bbox:
      description: |-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four or six numbers, depending on whether the
        coordinate reference system includes a vertical axis (height or depth):

        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)

        The coordinate reference system of the values is WGS 84 longitude/latitude
        (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate
        reference system is specified in the parameter `bbox-crs`.

        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value
        (west-most box edge) is larger than the third value (east-most box edge).

        If the vertical axis is included, the third and the sixth number are
        the bottom and the top of the 3-dimensional bounding box.

        If a feature has multiple spatial geometry properties, it is the decision of the
        server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      explode: false
      in: query
      name: bbox
      required: false
      schema:
        items:
          type: number
        maxItems: 6
        minItems: 4
        type: array
      style: form
    collectionId:
      description: local identifier of a collection
      in: path
      name: collectionId
      required: true
      schema:
        type: string
    collectionsArray:
      description: |
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched
      explode: false
      in: query
      name: collections
      required: false
      schema:
        $ref: '#/components/schemas/collectionsArray'
    datetime:
      description: |-
        Either a date-time or an interval, open or closed. Date and time expressions
        adhere to RFC 3339. Open intervals are expressed using double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      explode: false
      in: query
      name: datetime
      required: false
      schema:
        type: string
      style: form
    featureId:
      description: local identifier of a feature
      in: path
      name: featureId
      required: true
      schema:
        type: string
    ids:
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      explode: false
      in: query
      name: ids
      required: false
      schema:
        $ref: '#/components/schemas/ids'
    limit:
      description: |-
        The optional limit parameter limits the number of items that are presented in the response document.

        Only items are counted that are on the first level of the collection in the response document.
        Nested objects contained within the explicitly requested items shall not be counted.

        Minimum = 1. Maximum = 10000. Default = 10.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 10000
        minimum: 1
        type: integer
      style: form
    query:
      description: query for properties in items. Use the JSON form of the queryFilter
        used in POST.
      in: query
      name: query
      required: false
      schema:
        type: string
    assetId:
      name: assetId
      in: path
      description: local identifier of a asset
      required: true
      schema:
        type: string
    IfMatch:
      name: If-Match
      in: header
      description: >-
        Only take the action if the ETag of the item still matches
      required: true
      schema:
        type: string
    IfMatchOptional:
      name: If-Match
      in: header
      description: >-
        Only take the action if the ETag of the item still matches
      required: false
      schema:
        type: string
  responses:
    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collection'
        text/html:
          schema:
            type: string
      description: |-
        Information about the feature collection with id `collectionId`.

        The response contains a link to the items in the collection
        (path `/collections/{collectionId}/items`, link relation `items`)
        as well as key information about the collection. This information
        includes:

        * A local identifier for the collection that is unique for the dataset;
        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
    Collections:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collections'
        text/html:
          schema:
            type: string
      description: |-
        The feature collections shared by this API.

        The dataset is organized as one or more feature collections. This resource
        provides information about and access to the collections.

        The response contains the list of collections. For each collection, a link
        to the items in the collection (path `/collections/{collectionId}/items`,
        link relation `items`) as well as key information about the collection.
        This information includes:

        * A local identifier for the collection that is unique for the dataset;
        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
    ConformanceDeclaration:
      content:
        application/json:
          example:
            conformsTo:
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
          schema:
            $ref: '#/components/schemas/confClasses'
      description: |-
        The URIs of all conformance classes supported by the server.

        To support "generic" clients that want to access multiple
        OGC API Features implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
    Feature:
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureGeoJSON'
        text/html:
          schema:
            type: string
      description: |-
        fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
    Features:
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
        text/html:
          schema:
            type: string
      description: |-
        The response is a document consisting of features in the collection.
        The features included in the response are determined by the server
        based on the query parameters of the request. To support access to
        larger collections without overloading the client, the API supports
        paged access with links to the next page, if more features are selected
        that the page size.

        The `bbox` and `datetime` parameter can be used to select only a
        subset of the features in the collection (the features that are in the
        bounding box or time interval). The `bbox` parameter matches all features
        in the collection that are not associated with a location, too. The
        `datetime` parameter matches all features in the collection that are
        not associated with a time stamp or interval, too.

        The `limit` parameter may be used to control the subset of the
        selected features that should be returned in the response, the page size.
        Each page may include information about the number of selected and
        returned features (`numberMatched` and `numberReturned`) as well as
        links to support paging (link relation `next`).
    InvalidParameter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A query parameter has an invalid value.
    LandingPage:
      content:
        application/json:
          example:
            description: Catalog of Swiss Geodata Downloads
            id: ch
            links:
            - href: http://data.geo.admin.ch/api/stac/v0.9/search
              rel: search
              title: Search across feature collections
              type: application/json
            stac_version: 0.9.0
            title: data.geo.admin.ch
          schema:
            $ref: '#/components/schemas/landingPage'
        text/html:
          schema:
            type: string
      description: |-
        The landing page provides links to the API definition
        (link relations `service-desc` and `service-doc`),
        the Conformance declaration (path `/conformance`,
        link relation `conformance`), and the Feature
        Collections (path `/collections`, link relation
        `data`).
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A server error occurred.
    Assets:
      description: |-
        The response is a document consisting of all assets of the feature.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/itemAssets'
    Asset:
      description: |-
        The response is a document consisting of one asset of the feature.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/itemAsset'
    BadRequest:
      description: The request was malformed or semantically invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
    PermissionDenied:
      description: No Permission for this request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
    PreconditionFailed:
      description: Some condition specified by the request could not be met in the
        server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
    InternalServerError:
      description: The request was syntactically and semantically valid, but an error
        occurred while trying to act upon it
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
  schemas:
    assetQuery:
      additionalProperties:
        $ref: '#/components/schemas/assetQueryProp'
      description: |-
        Define which properties of the asset to query and the operations to apply.

        The following properties can be queried:
        - `type`: query for assets with this specific media type
        - `proj:epsg`: query for assets with this specific epsg
        - `eo:gsd`: query for assets with this specific gsd
        - `geoadmin:variant`: query for assets with this specific variant
      example:
        type:
          eq: image/tiff
      type: object
    assetQueryFilter:
      description: Allows users to query asset properties for specific values
      properties:
        assetQuery:
          $ref: '#/components/schemas/assetQuery'
      type: object
    assetQueryProp:
      anyOf:
      - description: if the object doesn't contain any of the operators, it is equivalent
          to using the equals operator
      - description: Match using an operator
        properties:
          contains:
            description: Find items with a property that contains the specified literal
              string, e.g., matches ".*<STRING>.*". A case-insensitive comparison
              must be performed.
            type: string
          endsWith:
            description: Find items with a property that ends with the specified string.
              A case-insensitive comparison must be performed.
            type: string
          eq:
            description: Find items with a property that is equal to the specified
              value. For strings, a case-insensitive comparison must be performed.
            nullable: true
            oneOf:
            - type: string
            - type: number
            - type: boolean
          in:
            description: Find items with a property that equals at least one entry
              in the specified array. A case-insensitive comparison must be performed.
            items:
              oneOf:
              - type: string
              - type: number
            type: array
          startsWith:
            description: Find items with a property that begins with the specified
              string. A case-insensitive comparison must be performed.
            type: string
        type: object
      description: Apply query operations to a specific property
    bbox:
      description: "Only features that have a geometry that intersects the bounding
        box are\nselected. The bounding box is provided as four or six numbers,\ndepending
        on whether the coordinate reference system includes a\nvertical axis (elevation
        or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner,
        coordinate axis 2  \n* Lower left corner, coordinate axis 3 (optional) \n*
        Upper right corner, coordinate axis 1 \n* Upper right corner, coordinate axis
        2 \n* Upper right corner, coordinate axis 3 (optional)\n\nThe coordinate reference
        system of the values is WGS84\nlongitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)
        unless\na different coordinate reference system is specified in the parameter\n`bbox-crs`.\n\nFor
        WGS84 longitude/latitude the values are in most cases the sequence\nof minimum
        longitude, minimum latitude, maximum longitude and maximum\nlatitude. However,
        in cases where the box spans the antimeridian the\nfirst value (west-most
        box edge) is larger than the third value\n(east-most box edge).\n\nIf a feature
        has multiple spatial geometry properties, it is the\ndecision of the server
        whether only a single spatial geometry property\nis used to determine the
        extent or all relevant geometries.\n\nExample: The bounding box of the New
        Zealand Exclusive Economic Zone in\nWGS 84 (from 160.6°E to 170°W and from
        55.95°S to 25.89°S) would be\nrepresented in JSON as `[160.6, -55.95, -170,
        -25.89]` and in a query as\n`bbox=160.6,-55.95,-170,-25.89`."
      example:
      - -110
      - 39.5
      - -105
      - 40.5
      items:
        type: number
      maxItems: 6
      minItems: 4
      type: array
    bboxFilter:
      description: Only return items that intersect the provided bounding box.
      properties:
        bbox:
          $ref: '#/components/schemas/bbox'
      type: object
    checksum:multihash:
      example: 90e402107a7f2588a85362b9beea2a12d4514d45
      pattern: ^[a-f0-9]+$
      title: Multihash
      type: string,
    collection:
      example:
        created: "2020-07-14T12:30:00Z"
        description: "Swiss Map Raster are a conversion of the map image into a digital
          form\nwith no direct bearing on the individual map elements.\n\nThe information
          is structured only in colour layers. Swiss Map Raster pixel \nmaps are ideal
          for finding background information for a broad variety of \nscreen applications,
          web and mobile applications and services, as well as \nfor geographic information
          systems. They can also be used as basic maps \nfor a variety of purposes
          (digital printing, plots, offset printing, etc.)."
        extent:
          spatial:
            bbox:
            - - 6.02260949059
              - 45.7769477403
              - 10.4427014502
              - 47.8308275417
          temporal:
            interval:
            - - "2012-01-01T00:00:00Z"
              - "2020-12-31T23:59:59Z"
        id: ch.swisstopo.pixelkarte-farbe-pk50.noscale
        license: proprietary
        links:
        - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
          rel: self
        - href: https://data.geo.admin.ch/api/stac/v0.9/
          rel: root
        - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
          rel: items
        - href: https://www.swisstopo.admin.ch/en/home/meta/conditions/geodata/free-geodata.html
          rel: license
          title: Licence for the free geodata of the Federal Office of Topography
            swisstopo
        - href: https://www.geocat.ch/geonetwork/srv/eng/catalog.search#/metadata/4c8c7c58-61c7-4a61-8e7a-6ffb95d183df
          rel: describedby
        providers:
        - name: Federal Office of Topography - swisstopo
          roles:
          - producer
          - licensor
          url: https://www.swisstopo.admin.ch
        stac_extensions:
        - proj
        - eo
        - https://data.geo.admin.ch/stac/geoadmin-extension/1.0/schema.json
        stac_version: 0.9.0
        summaries:
          eo:gsd:
          - 2.5
          geoadmin:variant:
          - - description: Grayscale combination with shading
              name: kgrel
            - description: Color combination without shading
              name: komb
            - description: Color combination with shading
              name: krel
          proj:epsg:
          - 2056
        title: National Map 1:50'000
        updated: "2020-07-14T12:30:00Z"
      properties:
        crs:
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          description: the list of coordinate reference systems supported by the service
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          - http://www.opengis.net/def/crs/EPSG/0/4326
          items:
            type: string
          type: array
        description:
          $ref: '#/components/schemas/description'
          description: a description of the features in the collection
          example: An address.
          type: string
        extent:
          $ref: '#/components/schemas/extent'
        id:
          description: identifier of the collection used, for example, in URIs
          example: address
          type: string
        itemType:
          default: feature
          description: indicator about the type of the items in the collection (the
            default value is 'feature').
          type: string
        keywords:
          description: List of keywords describing the collection.
          items:
            type: string
          type: array
        license:
          $ref: '#/components/schemas/license'
        links:
          example:
          - href: http://data.example.com/buildings
            rel: item
          - href: http://example.com/concepts/buildings.html
            rel: describedBy
            type: text/html
          items:
            $ref: '#/components/schemas/link'
          type: array
        providers:
          $ref: '#/components/schemas/providers'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        stac_version:
          $ref: '#/components/schemas/stac_version'
        summaries:
          additionalProperties:
            oneOf:
            - items:
                description: A value of any type.
              title: Set of values
              type: array
            - description: |-
                By default, only ranges with a minimum and a maximum value can
                be specified. Ranges can be specified for ordinal values only,
                which means they need to have a rank order. Therefore, ranges
                can only be specified for numbers and some special types of
                strings. Examples: grades (A to F), dates or times.
                Implementors are free to add other derived statistical values
                to the object, for example `mean` or `stddev`.
              properties:
                max:
                  anyOf:
                  - type: string
                  - type: number
                min:
                  anyOf:
                  - type: string
                  - type: number
              required:
              - min
              - max
              title: Statistics
              type: object
          description: |-
            Summaries are either a unique set of all available values *or*
            statistics. Statistics by default only specify the range (minimum
            and maximum values), but can optionally be accompanied by additional
            statistical values. The range can specify the potential range of
            values, but it is recommended to be as precise as possible. The set
            of values must contain at least one element and it is strongly
            recommended to list all values. It is recommended to list as many
            properties as reasonable so that consumers get a full overview of
            the Collection. Properties that are covered by the Collection
            specification (e.g. `providers` and `license`) may not be repeated
            in the summaries.
          type: object
        title:
          description: human readable title of the collection
          example: address
          type: string
      required:
      - id
      - links
      - stac_version
      - description
      - license
      - extent
      type: object
    collections:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/collection'
          type: array
        links:
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections?startindex=10
            rel: next
      required:
      - links
      - collections
      type: object
    collectionsArray:
      description: |-
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched.
      items:
        type: string
      type: array
    collectionsFilter:
      description: Only returns the collections specified
      properties:
        collections:
          $ref: '#/components/schemas/collectionsArray'
      type: object
    confClasses:
      properties:
        conformsTo:
          items:
            type: string
          type: array
      required:
      - conformsTo
      type: object
    datetime:
      description: |-
        Either a date-time or an interval, open or closed. Date and time
        expressions adhere to RFC 3339. Open intervals are expressed using
        double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
      type: string
    datetimeFilter:
      description: An object representing a date+time based filter.
      properties:
        datetime:
          $ref: '#/components/schemas/datetime'
      type: object
    description:
      description: "Detailed multi-line description to fully explain the object (collection,\nitem,
        asset, ...).\n\n[CommonMark 0.29](http://commonmark.org/) syntax MAY be used
        for rich\ntext representation. "
      type: string
    eo:gsd:
      description: "GSD is the nominal Ground Sample Distance for the data, as measured
        in \nmeters on the ground. There are many definitions of GSD. The value of
        \nthis attribute should be related to the spatial resolution at the sensor,
        \nrather than the pixel size of images after orthorectification, \npansharpening,
        or scaling. The GSD of a sensor can vary depending \non off-nadir and wavelength,
        so it is at the discretion of the \nimplementer to decide which value most
        accurately represents the GSD. \nFor example, Landsat8 optical and short-wave
        IR bands are all 30 meters, \nbut the panchromatic band is 15 meters. The
        eo:gsd should be 30 meters in \nthis case because that is nominal spatial
        resolution at the sensor. The \nPlanet PlanetScope Ortho Tile Product has
        an eo:gsd of 3.7 (or 4 if rounding), \neven though the pixel size of the images
        is 3.125. For example, one might \nchoose for WorldView-2 the Multispectral
        20° off-nadir value of 2.07 and \nfor WorldView-3 the Multispectral 20° off-nadir
        value of 1.38."
      example: 2.5
      title: Ground Sample Distance
      type: number
    exception:
      description: 'Information about the exception: an error code plus an optional
        description.'
      properties:
        code:
          type: string
        description:
          type: string
      required:
      - code
      type: object
    extent:
      description: |-
        The extent of the features in the collection. In the Core only spatial and temporal
        extents are specified. Extensions may add additional members to represent other
        extents, for example, thermal or pressure ranges.
      properties:
        spatial:
          description: The spatial extent of the features in the collection.
          properties:
            bbox:
              description: |-
                One or more bounding boxes that describe the spatial extent of the dataset.
                In the Core only a single bounding box is supported. Extensions may support
                additional areas. If multiple areas are provided, the union of the bounding
                boxes describes the spatial extent.
              items:
                description: |-
                  Each bounding box is provided as four or six numbers, depending on
                  whether the coordinate reference system includes a vertical axis
                  (height or depth):

                  * Lower left corner, coordinate axis 1
                  * Lower left corner, coordinate axis 2
                  * Minimum value, coordinate axis 3 (optional)
                  * Upper right corner, coordinate axis 1
                  * Upper right corner, coordinate axis 2
                  * Maximum value, coordinate axis 3 (optional)

                  The coordinate reference system of the values is WGS 84 longitude/latitude
                  (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate
                  reference system is specified in `crs`.

                  For WGS 84 longitude/latitude the values are in most cases the sequence of
                  minimum longitude, minimum latitude, maximum longitude and maximum latitude.
                  However, in cases where the box spans the antimeridian the first value
                  (west-most box edge) is larger than the third value (east-most box edge).

                  If the vertical axis is included, the third and the sixth number are
                  the bottom and the top of the 3-dimensional bounding box.

                  If a feature has multiple spatial geometry properties, it is the decision of the
                  server whether only a single spatial geometry property is used to determine
                  the extent or all relevant geometries.
                example:
                - -180
                - -90
                - 180
                - 90
                items:
                  type: number
                maxItems: 6
                minItems: 4
                type: array
              minItems: 1
              type: array
            crs:
              default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
              description: |-
                Coordinate reference system of the coordinates in the spatial extent
                (property `bbox`). The default reference system is WGS 84 longitude/latitude.
                In the Core this is the only supported coordinate reference system.
                Extensions may support additional coordinate reference systems and add
                additional enum values.
              enum:
              - http://www.opengis.net/def/crs/OGC/1.3/CRS84
              type: string
          required:
          - bbox
          type: object
        temporal:
          description: The temporal extent of the features in the collection.
          properties:
            interval:
              description: |-
                One or more time intervals that describe the temporal extent of the dataset.
                The value `null` is supported and indicates an open time intervall.
                In the Core only a single time interval is supported. Extensions may support
                multiple intervals. If multiple intervals are provided, the union of the
                intervals describes the temporal extent.
              items:
                description: |-
                  Begin and end times of the time interval. The timestamps
                  are in the coordinate reference system specified in `trs`. By default
                  this is the Gregorian calendar.
                example:
                - "2011-11-11T12:22:11Z"
                - null
                items:
                  format: date-time
                  nullable: true
                  type: string
                maxItems: 2
                minItems: 2
                type: array
              minItems: 1
              type: array
            trs:
              default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
              description: |-
                Coordinate reference system of the coordinates in the temporal extent
                (property `interval`). The default reference system is the Gregorian calendar.
                In the Core this is the only supported temporal reference system.
                Extensions may support additional temporal reference systems and add
                additional enum values.
              enum:
              - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
              type: string
          required:
          - interval
          type: object
      required:
      - spatial
      - temporal
      type: object
    featureCollectionGeoJSON:
      properties:
        features:
          items:
            $ref: '#/components/schemas/featureGeoJSON'
            type: array
        links:
          example:
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items
            rel: self
          - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items?startindex=10
            rel: next
        numberMatched:
          example: 256
        numberReturned:
          example: 10
        timeStamp:
          example: "2020-07-15T12:30:00Z"
        type:
          enum:
          - FeatureCollection
          type: string
      required:
      - type
      - features
      type: object
    featureGeoJSON:
      example:
        assets:
          smr50-263-2016-2056-kgrs-2.5.tiff:
            checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: kgrs
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
          smr50-263-2016-2056-komb-2.5.tiff:
            checksum:multihash: 90d402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: komb
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-komb-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
          smr50-263-2016-2056-krel-2.5.tiff:
            checksum:multihash: 90f402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: krel
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-krel-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
        bbox:
        - 7.242974548172171
        - 46.357085154660915
        - 7.699524647567326
        - 46.57310580640624
        collection: ch.swisstopo.pixelkarte-farbe-pk50.noscale
        geometry:
          coordinates:
          - - - 7.242974548172171
              - 46.57310580640624
            - - 7.243756483316452
              - 46.35721185723752
            - - 7.698490766144817
              - 46.357085154660915
            - - 7.699524647567326
              - 46.57297861624267
            - - 7.242974548172171
              - 46.57310580640624
          type: Polygon
        id: smr50-263-2016
        links:
        - href: https://data.geo.admin.ch/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr50-263-2016
          rel: self
        - href: https://data.geo.admin.ch/api/stac/v0.9/
          rel: root
        - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
          rel: collection
        properties:
          created: "2020-07-14T12:30:00Z"
          datetime: "2016-07-14T12:30:00Z"
          updated: "2020-07-14T12:30:00Z"
        stac_extensions:
        - proj
        - eo
        - checksum
        - https://data.geo.admin.ch/stac/geoadmin-extension/1.0/schema.json
        stac_version: 0.9.0
        type: Feature
      properties:
        geometry:
          $ref: '#/components/schemas/geometryGeoJSON'
        id:
          oneOf:
          - type: string
          - type: integer
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        properties:
          nullable: true
          type: object
        type:
          enum:
          - Feature
          type: string
      required:
      - type
      - geometry
      - properties
      type: object
    geoadmin:lang:
      enum:
      - de
      - it
      - fr
      - rm
      - en
      title: Product language
      type: string
    geoadmin:variant:
      example: komb
      title: Product variants
      type: string
    geometryGeoJSON:
      oneOf:
      - $ref: '#/components/schemas/pointGeoJSON'
      - $ref: '#/components/schemas/multipointGeoJSON'
      - $ref: '#/components/schemas/linestringGeoJSON'
      - $ref: '#/components/schemas/multilinestringGeoJSON'
      - $ref: '#/components/schemas/polygonGeoJSON'
      - $ref: '#/components/schemas/multipolygonGeoJSON'
      - $ref: '#/components/schemas/geometrycollectionGeoJSON'
    geometrycollectionGeoJSON:
      properties:
        geometries:
          items:
            $ref: '#/components/schemas/geometryGeoJSON'
          type: array
        type:
          enum:
          - GeometryCollection
          type: string
      required:
      - type
      - geometries
      type: object
    ids:
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      items:
        type: string
      type: array
    idsFilter:
      description: Only returns items that match the array of given ids
      properties:
        ids:
          $ref: '#/components/schemas/ids'
      type: object
    intersectsFilter:
      description: Only returns items that intersect with the provided polygon.
      properties:
        intersects:
          $ref: https://geojson.org/schema/Geometry.json
      type: object
    item:
      description: A GeoJSON Feature augmented with foreign members that contain values
        relevant to a STAC entity
      example:
        assets:
          smr50-263-2016-2056-kgrs-2.5.tiff:
            checksum:multihash: 90e402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: kgrs
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-kgrs-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
          smr50-263-2016-2056-komb-2.5.tiff:
            checksum:multihash: 90d402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: komb
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-komb-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
          smr50-263-2016-2056-krel-2.5.tiff:
            checksum:multihash: 90f402107a7f2588a85362b9beea2a12d4514d45
            created: "2020-07-14T12:30:00Z"
            eo:gsd: 2.5
            geoadmin:variant: krel
            href: https://data.geo.admin.ch/ch.swisstopo.pixelkarte-farbe-pk50.noscale/smr50-263-2016-2056-krel-2.5.tiff
            proj:epsg: "2056"
            type: image/tiff; application=geotiff
            updated: "2020-07-14T12:30:00Z"
        bbox:
        - 7.242974548172171
        - 46.357085154660915
        - 7.699524647567326
        - 46.57310580640624
        collection: ch.swisstopo.pixelkarte-farbe-pk50.noscale
        geometry:
          coordinates:
          - - - 7.242974548172171
              - 46.57310580640624
            - - 7.243756483316452
              - 46.35721185723752
            - - 7.698490766144817
              - 46.357085154660915
            - - 7.699524647567326
              - 46.57297861624267
            - - 7.242974548172171
              - 46.57310580640624
          type: Polygon
        id: smr50-263-2016
        links:
        - href: https://data.geo.admin.ch/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale/items/smr50-263-2016
          rel: self
        - href: https://data.geo.admin.ch/api/stac/v0.9/
          rel: root
        - href: https://data.geo.admin.ch/api/stac/v0.9/collections/ch.swisstopo.pixelkarte-farbe-pk50.noscale
          rel: collection
        properties:
          created: "2020-07-14T12:30:00Z"
          datetime: "2016-07-14T12:30:00Z"
          updated: "2020-07-14T12:30:00Z"
        stac_extensions:
        - proj
        - eo
        - checksum
        - https://data.geo.admin.ch/stac/geoadmin-extension/1.0/schema.json
        stac_version: 0.9.0
        type: Feature
      properties:
        assets:
          $ref: '#/components/schemas/itemAssets'
        bbox:
          $ref: '#/components/schemas/bbox'
        geometry:
          $ref: https://geojson.org/schema/Geometry.json
        id:
          $ref: '#/components/schemas/itemId'
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        properties:
          $ref: '#/components/schemas/itemProperties'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        stac_version:
          $ref: '#/components/schemas/stac_version'
        type:
          $ref: '#/components/schemas/itemType'
      required:
      - stac_version
      - id
      - type
      - geometry
      - bbox
      - links
      - properties
      - assets
      type: object
    itemAssets:
      additionalProperties:
        properties:
          description:
            description: |-
              Multi-line description to explain the asset.

              [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
              rich text representation.
            example: Small 256x256px PNG thumbnail for a preview.
            type: string
          href:
            description: Link to the asset object
            example: http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
            format: url
            type: string
          roles:
            description: Purposes of the asset
            example:
            - thumbnail
            items:
              type: string
            type: array
          title:
            description: Displayed title
            example: Thumbnail
            type: string
          type:
            description: Media type of the asset
            example: image/png
            type: string
        required:
        - href
        type: object
        $ref: '#/components/schemas/itemAsset'
      type: object
    itemCollection:
      description: A GeoJSON FeatureCollection augmented with foreign members that
        contain values relevant to a STAC entity
      properties:
        features:
          items:
            $ref: '#/components/schemas/item'
          type: array
        links:
          $ref: '#/components/schemas/itemCollectionLinks'
        type:
          enum:
          - FeatureCollection
          type: string
      required:
      - features
      - type
      type: object
    itemCollectionLinks:
      description: An array of links. Can be used for pagination, e.g. by providing
        a link with the `next` relation type.
      example:
      - href: https://data.geo.admin.ch/api/stac/v0.9/search?startindex=10
        rel: next
      items:
        $ref: '#/components/schemas/link'
      type: array
    itemId:
      description: Provider identifier, a unique ID, potentially a link to a file.
      example: path/to/example.tif
      type: string
    itemProperties:
      additionalProperties:
        description: Any additional properties added in via Item specification or
          extensions.
      description: provides the core metatdata fields plus extensions
      properties:
        datetime:
          $ref: '#/components/schemas/datetime'
      required:
      - datetime
      type: object
    itemType:
      description: The GeoJSON type
      enum:
      - Feature
      type: string
    landingPage:
      properties:
        description:
          example: Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
          type: string
        id:
          type: string
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        stac_version:
          $ref: '#/components/schemas/stac_version'
        title:
          example: Buildings in Bonn
          type: string
      required:
      - links
      - stac_version
      - id
      - description
      type: object
    license:
      description: |-
        License(s) of the data as a SPDX
        [License identifier](https://spdx.org/licenses/). Alternatively, use
        `proprietary` if the license is not on the SPDX license list or
        `various` if multiple licenses apply. In these two cases links to the
        license texts SHOULD be added, see the `license` link relation type.

        Non-SPDX licenses SHOULD add a link to the license text with the
        `license` relation in the links section. The license text MUST NOT be
        provided as a value of this field. If there is no public license URL
        available, it is RECOMMENDED to host the license text and
        link to it.
      example: Apache-2.0
      type: string
    limit:
      default: 10
      description: The maximum number of results to return (page size). Defaults to
        10
      example: 20
      maximum: 10000
      minimum: 1
      type: integer
    limitFilter:
      description: Only returns maximum number of results (page size)
      properties:
        limit:
          $ref: '#/components/schemas/limit'
      type: object
    linestringGeoJSON:
      properties:
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          minItems: 2
          type: array
        type:
          enum:
          - LineString
          type: string
      required:
      - type
      - coordinates
      type: object
    link:
      properties:
        body:
          description: For POST requests, the link can specify the HTTP body as a
            JSON object.
          type: object
        headers:
          description: Object key values pairs they map to headers
          example:
            Accept: application/json
          type: object
        href:
          example: http://data.example.com/buildings/123
          format: url
          type: string
        hreflang:
          example: en
          type: string
        length:
          type: integer
        merge:
          default: false
          description: |-
            This is only valid when the server is responding to POST request.

            If merge is true, the client is expected to merge the body value
            into the current request body before following the link.
            This avoids passing large post bodies back and forth when following
            links, particularly for navigating pages through the `POST /search`
            endpoint.

            NOTE: To support form encoding it is expected that a client be able
            to merge in the key value pairs specified as JSON
            `{"next": "token"}` will become `&next=token`.
          type: boolean
        method:
          default: GET
          description: Specifies the HTTP method that the link expects
          enum:
          - GET
          - POST
          type: string
        rel:
          example: alternate
          type: string
        title:
          example: Trierer Strasse 70, 53115 Bonn
          type: string
        type:
          example: application/geo+json
          type: string
      required:
      - href
      - rel
      title: Link
      type: object
    multilinestringGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 2
            type: array
          type: array
        type:
          enum:
          - MultiLineString
          type: string
      required:
      - type
      - coordinates
      type: object
    multipointGeoJSON:
      properties:
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          type: array
        type:
          enum:
          - MultiPoint
          type: string
      required:
      - type
      - coordinates
      type: object
    multipolygonGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 4
              type: array
            type: array
          type: array
        type:
          enum:
          - MultiPolygon
          type: string
      required:
      - type
      - coordinates
      type: object
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      example: 127
      minimum: 0
      type: integer
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      example: 10
      minimum: 0
      type: integer
    pointGeoJSON:
      properties:
        coordinates:
          items:
            type: number
          minItems: 2
          type: array
        type:
          enum:
          - Point
          type: string
      required:
      - type
      - coordinates
      type: object
    polygonGeoJSON:
      properties:
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 4
            type: array
          type: array
        type:
          enum:
          - Polygon
          type: string
      required:
      - type
      - coordinates
      type: object
    proj:epsg:
      description: "A Coordinate Reference System (CRS) is the data reference system
        (sometimes called a 'projection') used by the asset data, and can usually
        be referenced using an EPSG code. If the asset data does not have a CRS, such
        as in the case of non-rectified imagery with Ground Control Points, proj:epsg
        should be set to null. It should also be set to null if a CRS exists, but
        for which there is no valid EPSG code."
      example: 2056
      title: EPSG code.
      type:
      - integer
      - null
    providers:
      description: A list of providers, which may include all organizations capturing
        or processing the data or the hosting provider. Providers should be listed
        in chronological order with the most recent provider being the last element
        of the list.
      items:
        properties:
          description:
            description: |-
              Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.

              CommonMark 0.29 syntax MAY be used for rich text representation.
            type: string
          name:
            description: The name of the organization or the individual.
            type: string
          roles:
            description: |-
              Roles of the provider.

              The provider's role(s) can be one or more of the following
              elements:

              * licensor: The organization that is licensing the dataset under
                the license specified in the collection's license field.
              * producer: The producer of the data is the provider that
                initially captured and processed the source data, e.g. ESA for
                Sentinel-2 data.
              * processor: A processor is any provider who processed data to a
                derived product.
              * host: The host is the actual provider offering the data on their
                storage. There should be no more than one host, specified as last
                element of the list.
            items:
              enum:
              - producer
              - licensor
              - processor
              - host
              type: string
            type: array
          url:
            description: Homepage on which the provider describes the dataset and
              publishes contact information.
            format: url
            type: string
        required:
        - name
        title: Provider
        type: object
      type: array
    query:
      additionalProperties:
        $ref: '#/components/schemas/queryProp'
      description: Define which properties to query and the operatations to apply
      example:
        property:
          eq: ""
      type: object
    queryFilter:
      description: Allows users to query properties for specific values
      properties:
        query:
          $ref: '#/components/schemas/query'
      type: object
    queryProp:
      anyOf:
      - description: if the object doesn't contain any of the operators, it is equivalent
          to using the equals operator
      - description: Match using an operator
        properties:
          contains:
            description: Find items with a property that contains the specified literal
              string, e.g., matches ".*<STRING>.*". A case-insensitive comparison
              must be performed.
            type: string
          endsWith:
            description: Find items with a property that ends with the specified string.
              A case-insensitive comparison must be performed.
            type: string
          eq:
            description: Find items with a property that is equal to the specified
              value. For strings, a case-insensitive comparison must be performed.
            nullable: true
            oneOf:
            - type: string
            - type: number
            - type: boolean
          gt:
            description: Find items with a property value greater than the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          gte:
            description: Find items with a property value greater than or equal the
              specified value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          in:
            description: Find items with a property that equals at least one entry
              in the specified array. A case-insensitive comparison must be performed.
            items:
              oneOf:
              - type: string
              - type: number
            type: array
          lt:
            description: Find items with a property value less than the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          lte:
            description: Find items with a property value less than or equal the specified
              value.
            oneOf:
            - format: date-time
              type: string
            - type: number
          neq:
            description: Find items that *don't* contain the specified value. For
              strings, a case-insensitive comparison must be performed.
            nullable: true
            oneOf:
            - type: string
            - type: number
            - type: boolean
          startsWith:
            description: Find items with a property that begins with the specified
              string. A case-insensitive comparison must be performed.
            type: string
        type: object
      description: Apply query operations to a specific property
    searchBody:
      allOf:
      - $ref: '#/components/schemas/assetQueryFilter'
      - $ref: '#/components/schemas/queryFilter'
      - $ref: '#/components/schemas/bboxFilter'
      - $ref: '#/components/schemas/datetimeFilter'
      - $ref: '#/components/schemas/intersectsFilter'
      - $ref: '#/components/schemas/collectionsFilter'
      - $ref: '#/components/schemas/idsFilter'
      - $ref: '#/components/schemas/limitFilter'
      description: The search criteria
      type: object
    stac_extensions:
      items:
        anyOf:
        - format: uri
          title: Reference to a JSON Schema
          type: string
        - title: Reference to a core extension
          type: string
      title: STAC extensions
      type: array
      uniqueItems: true
    stac_version:
      example: 0.9.0
      title: STAC version
      type: string
    timeStamp:
      description: This property indicates the time and date when the response was
        generated.
      example: "2017-08-17T08:05:32Z"
      format: date-time
      type: string
    assetId:
      type: string
      pattern: ^[a-z0-9.-_]+$
      title: asset id
      description: |-
        The asset id uniquely identifies the asset for an item

        **Note**: `assetId` must be unique for the item. The media-type
        can be part of the `assetId`, so it's perfectly ok to have one asset
        with id `smr50-263-2016-2056-kgrs-2.5.tiff` and another one with id
        `smr50-263-2016-2056-kgrs-2.5.png`
      example: smr50-263-2016-2056-kgrs-2.5.tiff
    itemBase:
      type: object
      required:
      - 'checksum:multihash'
      properties:
        title:
          $ref: '#/components/schemas/title'
        description:
          $ref: '#/components/schemas/description'
        type:
          $ref: '#/components/schemas/type'
        geoadmin:variant:
          $ref: '#/components/schemas/geoadmin:variant'
        geoadmin:lang:
          $ref: '#/components/schemas/geoadmin:lang'
        checksum:multihash:
          $ref: '#/components/schemas/checksum:multihash'
        proj:epsg:
          $ref: '#/components/schemas/proj:epsg'
        eo:gsd:
          $ref: '#/components/schemas/eo:gsd'
    itemAsset:
      allOf:
      - $ref: '#/components/schemas/itemBase'
      - type: object
        required:
        - href
        properties:
          href:
            $ref: '#/components/schemas/href'
    itemAssetWrite:
      allOf:
      - $ref: '#/components/schemas/itemBase'
      - type: object
        required:
        - copyFromHref
        properties:
          id:
            $ref: '#/components/schemas/assetId'
          copyFromHref:
            $ref: '#/components/schemas/copyFromHref'
    copyFromHref:
      type: string
      format: url
      description: |-
        Link to the temporary location of the asset object.

        The service will move the asset from this temporary location to the correct one under
        `data.geo.admin.ch`. If the temporary location is under `https://data.geo.admin.ch/tmp`
        the data will not actually be copied, but just re-registered under a new key.
      example: >-
        http://data.geo.admin.ch/tmp/gdwh/ch.swisstopo.swissimage/CS3-20160503_132130_04.png
    href:
      type: string
      format: url
      description: Link to the asset object
      example: >-
        http://data.geo.admin.ch/ch.swisstopo.swissimage/collections/cs/items/CS3-20160503_132130_04/thumb.png
    partialAsset:
      allOf:
      - $ref: '#/components/schemas/itemBase'
      - type: object
        properties:
          copyFromHref:
            $ref: '#/components/schemas/copyFromHref'
        example:
          description: The new description of the asset
    metaItem:
      description: A GeoJSON Feature augmented with foreign members that contain values
        relevant to a STAC entity
      type: object
      required:
      - stac_version
      - id
      - type
      - geometry
      - bbox
      - links
      - properties
      - assets
      properties:
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        id:
          $ref: '#/components/schemas/itemId'
        bbox:
          $ref: '#/components/schemas/bbox'
        geometry:
          $ref: 'https://geojson.org/schema/Geometry.json'
        type:
          $ref: '#/components/schemas/itemType'
        properties:
          $ref: '#/components/schemas/itemProperties'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
      example:
        stac_version: 0.9.0
        stac_extensions:
        - eo
        - view
        - 'https://example.com/cs-extension/1.0/schema.json'
        type: Feature
        id: CS3-20160503_132131_05
        bbox:
        - -122.59750209
        - 37.48803556
        - -122.2880486
        - 37.613537207
        geometry:
          type: Polygon
          coordinates:
          - - - -122.308150179
              - 37.488035566
            - - -122.597502109
              - 37.538869539
            - - -122.576687533
              - 37.613537207
            - - -122.2880486
              - 37.562818007
            - - -122.308150179
              - 37.488035566
        properties:
          datetime: '2016-05-03T13:22:30.040Z'
          title: A CS3 item
          license: PDDL-1.0
          providers:
          - name: CoolSat
            roles:
            - producer
            - licensor
            url: 'https://cool-sat.com/'
          view:sun_azimuth: 168.7
          eo:cloud_cover: 0.12
          view:off_nadir: 1.4
          platform: coolsat2
          instruments:
          - cool_sensor_v1
          eo:bands: []
          view:sun_elevation: 33.4
          eo:gsd: 0.512
        collection: CS3
        links:
        - rel: self
          href: 'http://cool-sat.com/collections/CS3/items/20160503_132130_04'
        - rel: root
          href: 'http://cool-sat.com/collections'
        - rel: parent
          href: 'http://cool-sat.com/collections/CS3'
        - rel: collection
          href: 'http://cool-sat.com/collections/CS3'
    partialItem:
      type: object
      properties:
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        id:
          $ref: '#/components/schemas/itemId'
        bbox:
          $ref: '#/components/schemas/bbox'
        geometry:
          $ref: 'https://geojson.org/schema/Geometry.json'
        type:
          $ref: '#/components/schemas/itemType'
        properties:
          $ref: '#/components/schemas/partialItemProperties'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
      example:
        datetime: "2016-05-03T13:22:30.040Z"
    partialItemProperties:
      type: object
      description: allows for partial collections of metadata fields
      additionalProperties: true
      properties:
        datetime:
          $ref: '#/components/schemas/datetime'
    partialCollection:
      type: object
      description: allows for a set of partial metadata fields for a collection
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          type: string
          example: address
        title:
          description: human readable title of the collection
          type: string
          example: address
        description:
          description: a description of the features in the collection
          type: string
          example: An address.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
          example:
          - href: http://data.example.com/buildings
            rel: item
          - href: http://example.com/concepts/buildings.html
            rel: describedBy
            type: text/html
        extent:
          $ref: "#/components/schemas/extent"
        itemType:
          description: indicator about the type of the items in the collection (the
            default value is 'feature').
          type: string
          default: feature
        crs:
          description: the list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          - http://www.opengis.net/def/crs/EPSG/0/4326
        example:
          title: The new title of the collection
    roles:
      type: array
      items:
        type: string
      description: Purposes of the asset
      example:
      - thumbnail
    title:
      type: string
      description: Displayed title
      example: Thumbnail
    type:
      type: string
      description: Media type of the asset
      example: image/png
paths:
  /:
    get:
      description: |-
        The landing page provides links to the API definition, the conformance
        statements and to the feature collections in this dataset.
      operationId: getLandingPage
      responses:
        "200":
          $ref: '#/components/responses/LandingPage'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: landing page
      tags:
      - Capabilities
  /collections:
    get:
      operationId: getCollections
      responses:
        "200":
          $ref: '#/components/responses/Collections'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: the feature collections in the dataset
      tags:
      - Data
    post:
      tags:
      - Data Management
      summary: |-
        create a new collection
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collection'
      responses:
        "201":
          $ref: '#/components/responses/Collection'
  /collections/{collectionId}:
    get:
      operationId: describeCollection
      parameters:
      - $ref: '#/components/parameters/collectionId'
      responses:
        "200":
          $ref: '#/components/responses/Collection'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: describe the feature collection with id `collectionId`
      tags:
      - Data
    put:
      tags:
      - Data Management
      summary: |-
        update an existing collection with Id `collectionId` with a complete collection definition
      operationId: updateCollection
      parameters:
      - $ref: '#/components/parameters/collectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collection'
      responses:
        "200":
          $ref: '#/components/responses/Collection'
        "403":
          $ref: '#/components/responses/PermissionDenied'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
  /collections/{collectionId}/items:
    get:
      description: |-
        Fetch features of the feature collection with id `collectionId`.

        Every feature in a dataset belongs to a collection. A dataset may
        consist of multiple feature collections. A feature collection is often a
        collection of features of a similar type, based on a common schema.

        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeatures
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/datetime'
      responses:
        "200":
          $ref: '#/components/responses/Features'
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: fetch features
      tags:
      - Data
    post:
      summary: add a new item to a collection
      description: create a new item in a specific collection
      operationId: postFeature
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metaItem'
      responses:
        "201":
          description: Status of the create request.
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
            ETag:
              schema:
                type: string
              description: A string to ensure the item has not been modified
          content:
            application/geo+json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/items/{featureId}:
    get:
      description: |-
        Fetch the feature with id `featureId` in the feature collection
        with id `collectionId`.

        Use content negotiation to request HTML or GeoJSON.
      operationId: getFeature
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      responses:
        "200":
          $ref: '#/components/responses/Feature'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: fetch a single feature
      tags:
      - Data
    put:
      summary: update an existing feature by Id with a complete item definition
      description: >-
        Use this method to update an existing feature. Requires the entire GeoJSON 
        description be submitted.
      operationId: putFeature
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metaItem'
      responses:
        "200":
          description: Status of the update request.
          headers:
            ETag:
              schema:
                type: string
              description: A string to ensure the item has not been modified
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    patch:
      summary: update an existing feature by Id with a partial item definition
      description: >-
        Use this method to update an existing feature. Requires a GeoJSON fragement
        (containing the fields to be updated) be submitted.
      operationId: patchFeature
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/IfMatchOptional'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partialItem'
      responses:
        "200":
          description: Status of the update request.
          headers:
            ETag:
              schema:
                type: string
              description: A string to ensure the item has not been modified
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    delete:
      summary: delete an existing feature by Id
      description: Use this method to delete an existing feature.
      operationId: deleteFeature
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/IfMatch'
      responses:
        "204":
          description: Status of the delete request.
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /conformance:
    get:
      description: |-
        A list of all conformance classes specified in a standard that the
        server conforms to.
      operationId: getConformanceDeclaration
      responses:
        "200":
          $ref: '#/components/responses/ConformanceDeclaration'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: information about specifications that this API conforms to
      tags:
      - Capabilities
  /search:
    get:
      description: |-
        Retrieve Items matching filters. Intended as a shorthand API for simple
        queries.

        This method is optional, but you MUST implement `POST /search` if you
        want to implement this method.

        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` to the
        `links` array in `GET /`. As `GET` is the default method, the `method`
        may not be set explicitly in the link.
      operationId: getSearchSTAC
      parameters:
      - $ref: '#/components/parameters/assetQuery'
      - $ref: '#/components/parameters/query'
      - $ref: '#/components/parameters/bbox'
      - $ref: '#/components/parameters/datetime'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/ids'
      - $ref: '#/components/parameters/collectionsArray'
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
          description: A feature collection.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: Search STAC items with simple filtering.
      tags:
      - STAC
    post:
      description: |-
        retrieve items matching filters. Intended as the standard, full-featured
        query API.

        This method is mandatory to implement if `GET /search` is implemented.
        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` and `method`
        set to `POST` to the `links` array in `GET /`.
      operationId: postSearchSTAC
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchBody'
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
          description: A feature collection.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: Search STAC items with full-featured filtering.
      tags:
      - STAC
  /collections/{collectionId}/items/{featureId}/assets:
    get:
      description: |-
        Fetch assets of the item with id `featureId`.

        Every asset belongs to an item.
      operationId: getAssets
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      responses:
        "200":
          $ref: '#/components/responses/Assets'
        "400":
          $ref: '#/components/responses/InvalidParameter'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: fetch all assets for a feature
      tags:
      - Data
    post:
      summary: add a new asset to a feature
      description: "Create a new asset for a specific feature.\n\nWhen creating a
        new asset for a feature, the metadata of\nthe asset along with a temporary
        url of the asset itself is \nposted to the API.\n\nThe service is taking care
        of copying the asset from the temporary\nlocation to correct one."
      operationId: postAsset
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itemAssetWrite'
      responses:
        "202":
          description: Accepted create request
          headers:
            Location:
              description: A link to the item
              schema:
                type: string
                format: url
            ETag:
              schema:
                type: string
              description: A string to ensure the item has not been modified
          content:
            application/geo+json:
              schema:
                type: string
            text/html:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
  /collections/{collectionId}/items/{featureId}/assets/{assetId}:
    get:
      description: |-
        Fetch the asset with id `assetId` of the feature with id `featureId`
        in the feature collection with id `collectionId`.
      operationId: getAsset
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/assetId'
      responses:
        "200":
          $ref: '#/components/responses/Asset'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/ServerError'
      summary: fetch a single asset
      tags:
      - Data
    put:
      summary: update an existing asset by Id with a complete asset definition
      description: >-
        Use this method to update an existing asset. Requires the entire GeoJSON 
        description be submitted.
      operationId: putAsset
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/assetId'
      - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/itemAssetWrite'
      responses:
        "200":
          description: Status of the update request.
          headers:
            ETag:
              schema:
                type: string
              description: A string to ensure the asset has not been modified
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    patch:
      summary: update an existing asset by Id with a partial asset definition
      description: >-
        Use this method to update an existing asset. Requires a GeoJSON fragment (containing
        the fields to be updated) be submitted.
      operationId: patchAsset
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/assetId'
      - $ref: '#/components/parameters/IfMatchOptional'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partialAsset'
      responses:
        "200":
          description: Status of the update request.
          headers:
            ETag:
              schema:
                type: string
              description: A string to ensure the asset has not been modified
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
    delete:
      summary: delete an existing asset by Id
      description: Use this method to delete an existing asset.
      operationId: deleteAsset
      tags:
      - Data Management
      parameters:
      - $ref: '#/components/parameters/collectionId'
      - $ref: '#/components/parameters/featureId'
      - $ref: '#/components/parameters/assetId'
      - $ref: '#/components/parameters/IfMatch'
      responses:
        "204":
          description: Status of the delete request.
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
