openapi: 3.0.1
components:
  parameters:
    assetQuery:
      description: >-
        Query for properties in assets (e.g. mediatype). Use the JSON form of the assetQueryFilter
        used in POST.
      in: query
      name: assetQuery
      required: false
      schema:
        type: string
    bbox:
      explode: false
      in: query
      name: bbox
      required: false
      schema:
        $ref: "./schemas.yaml#/components/schemas/bbox"
      style: form
    collectionId:
      description: Local identifier of a collection
      in: path
      name: collectionId
      required: true
      schema:
        type: string
    collectionsArray:
      explode: false
      in: query
      name: collections
      required: false
      schema:
        $ref: "./schemas.yaml#/components/schemas/collectionsArray"
    datetime:
      explode: false
      in: query
      name: datetime
      required: false
      schema:
        $ref: "./schemas.yaml#/components/schemas/datetimeQuery"
      example: 2018-02-12T00%3A00%3A00Z%2F2018-03-18T12%3A31%3A12Z
      style: form
    featureId:
      description: Local identifier of a feature
      in: path
      name: featureId
      required: true
      schema:
        type: string
    assetObjectHref:
      name: assetObjectHref
      in: path
      description: Full URL to asset object including protocol, host and path
      required: true
      schema:
        type: string
    # presignedUrl:
    #   name: presignedUrl
    #   in: path
    #   description: Presigned url returned by [Create a new Asset's multipart upload](#operation/createAssetUpload).
    #   required: true
    #   schema:
    #     type: string
    ids:
      description: >-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      explode: false
      in: query
      name: ids
      required: false
      schema:
        $ref: "./schemas.yaml#/components/schemas/ids"
    limit:
      explode: false
      in: query
      name: limit
      required: false
      schema:
        $ref: "./schemas.yaml#/components/schemas/limit"
      style: form
    query:
      description: Query for properties in items. Use the JSON form of the queryFilter used in POST.
      in: query
      name: query
      required: false
      schema:
        type: string
    IfNoneMatch:
      name: If-None-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-None-Match` header field makes the GET request method conditional. It is
        composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-None-Match`) with the ETag for its
        current version of the resource, and if both values match (that is, the resource has not changed),
        the server sends back a `304 Not Modified` status, without a body, which tells the client that
        the cached version of the response is still good to use (fresh).
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
    IfMatch:
      name: If-Match
      in: header
      schema:
        type: string
      description: >-
        The RFC7232 `If-Match` header field makes the GET request method conditional. It is
        composed of a comma separated list of ETags or value "*".


        The server compares the client's ETags (sent with `If-Match`) with the ETag for its
        current version of the resource, and if both values don't match (that is, the resource has changed),
        the server sends back a `412 Precondition Failed` status, without a body, which tells the client that
        the cached version of the response is not good to use anymore.
      example: "d01af8b8ebbf899e30095be8754b377ddb0f0ed0f7fddbc33ac23b0d1969736b"
