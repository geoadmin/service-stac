openapi: 3.0.3
components:
  responses:
    Collection:
      headers:
        ETag:
          $ref: "./headers.yaml#/components/headers/ETag"
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/collection"
      description: >-
        Information about the feature collection with id `collectionId`.


        The response contains a link to the items in the collection
        (path `/collections/{collectionId}/items`, link relation `items`)
        as well as key information about the collection. This information
        includes:


        * A local identifier for the collection that is unique for the dataset

        * A list of coordinate reference systems (CRS) in which geometries may be returned by the
        server. The first CRS is the default coordinate reference system (the default is always
        WGS 84 with axis order longitude/latitude)

        * An optional title and description for the collection

        * An optional extent that can be used to provide an indication of the spatial and temporal
        extent of the collection - typically derived from the data

        * An optional indicator about the type of the items in the collection (the default value,
        if the indicator is not provided, is 'feature')
    Collections:
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/collections"
      description: >-
        The feature collections shared by this API.


        The dataset is organized as one or more feature collections. This resource
        provides information about and access to the collections.


        The response contains the list of collections. For each collection, a link
        to the items in the collection (path `/collections/{collectionId}/items`,
        link relation `items`) as well as key information about the collection.
        This information includes:


        * A local identifier for the collection that is unique for the dataset

        * A list of coordinate reference systems (CRS) in which geometries may be returned by the
        server. The first CRS is the default coordinate reference system (the default is always
        WGS 84 with axis order longitude/latitude)

        * An optional title and description for the collection

        * An optional extent that can be used to provide an indication of the spatial and temporal
        extent of the collection - typically derived from the data

        * An optional indicator about the type of the items in the collection (the default value,
        if the indicator is not provided, is 'feature').

        The `limit` parameter may be used to control the subset of the
        selected collections that should be returned in the response, the page size.
        Each page include links to support paging (link relation `next` and/or
        `previous`).
    CollectionAssets:
      description: >-
        The response is a document consisting of all assets of the collection.
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/collectionAssets"
    CollectionAsset:
      description: >-
        The response is a document consisting of one asset of the collection.
      headers:
        ETag:
          $ref: "./headers.yaml#/components/headers/ETag"
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/collectionAsset"
    ConformanceDeclaration:
      content:
        application/json:
          example:
            conformsTo:
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
          schema:
            $ref: "./schemas.yaml#/components/schemas/confClasses"
      description: >-
        The URIs of all conformance classes supported by the server.


        To support "generic" clients that want to access multiple
        OGC API Features implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
    Feature:
      headers:
        ETag:
          $ref: "./headers.yaml#/components/headers/ETag"
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/item"
      description: >-
        Fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
    Features:
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/items"
      description: >-
        The response is a document consisting of features in the collection.
        The features included in the response are determined by the server
        based on the query parameters of the request. To support access to
        larger collections without overloading the client, the API supports
        paged access with links to the next page, if more features are selected
        that the page size.


        The `bbox` and `datetime` parameter can be used to select only a
        subset of the features in the collection (the features that are in the
        bounding box or time interval). The `bbox` parameter matches all features
        in the collection that are not associated with a location, too. The
        `datetime` parameter matches all features in the collection that are
        not associated with a time stamp or interval, too.


        The `limit` parameter may be used to control the subset of the
        selected features that should be returned in the response, the page size.
        Each page include links to support paging (link relation `next` and/or
        `previous`).
    NotModified:
      # Currently the 304 Not Modified is handled by django and we cannot give a body. Anyway
      # the standard specify the 304 without body
      # content:
      #   application/json:
      #     schema:
      #       $ref: "./schemas.yaml#/components/schemas/exception"
      #     example:
      #       code: 304
      #       description: "Not modified"
      description: The cached resource was not modified since last request.
    InvalidParameter:
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exception"
          example:
            code: 400
            description: "Invalid parameter"
      description: A query parameter has an invalid value.
    LandingPage:
      content:
        application/json:
          example:
            description: Catalog of Swiss Geodata Downloads
            id: ch
            links:
              - href: http://data.geo.admin.ch/api/stac/v1/
                rel: self
                type: application/json
                title: this document
              - href: http://data.geo.admin.ch/api/stac/v1/static/api.html
                rel: service-doc
                type: text/html
                title: the API documentation
              - href: http://data.geo.admin.ch/api/stac/v1/conformance
                rel: conformance
                type: application/json
                title: OGC API conformance classes implemented by this server
              - href: http://data.geo.admin.ch/api/stac/v1/collections
                rel: data
                type: application/json
                title: Information about the feature collections
              - href: http://data.geo.admin.ch/api/stac/v1/search
                rel: search
                type: application/json
                title: Search across feature collections
            stac_version: 1.0.0
            title: data.geo.admin.ch
            type: Catalog
            conformsTo:
              - https://api.stacspec.org/v1.0.0/core
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
          schema:
            $ref: "./schemas.yaml#/components/schemas/landingPage"
      description: >-
        The landing page provides links to the API definition
        (link relations `service-desc` and `service-doc`),
        the Conformance declaration (path `/conformance`,
        link relation `conformance`), and the Feature
        Collections (path `/collections`, link relation
        `data`).
    NotFound:
      description: The specified resource/URI was not found
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exception"
          example:
            code: 404
            description: "Resource not found"
    NotFoundS3:
      description: The specified asset object was not found
      content:
        application/xml:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exceptionS3"
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <Error><Code>AccessDenied</Code>
            <Message>Access Denied</Message>
            <RequestId>BJE6DBWM0M1D9BDC</RequestId>
            <HostId>N9hTgbJmEuiMnvb+W9Y1Y+fhFoZh92NYG13Z3K19PBZOZ4hbn7F7i3yYpjJgM7bIFmDH2BnE81U=</HostId>
            </Error>
    BadRequest:
      description: The request was malformed or semantically invalid
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exception"
          example:
            code: 400
            description: "Invalid parameter"
    PermissionDenied:
      description: No Permission for this request
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exception"
          example:
            code: 403
            description: "Permission denied"
    PreconditionFailed:
      description: Some condition specified by the request could not be met in the server
      # Currently the 412 Precondition not met is handled by django and we cannot give a body
      # content:
      #   application/json:
      #     schema:
      #       $ref: "./schemas.yaml#/components/schemas/exception"
      #     example:
      #       code: 412
      #       description: "Precondition not met"
    PreconditionFailedS3:
      description: Some condition specified by the request could not be met in the server
      content:
        application/xml:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exceptionS3"
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <Error><Code>PreconditionFailed</Code>
            <Message>At least one of the pre-conditions you specified did not hold</Message>
            <Condition>If-Match</Condition>
            <RequestId>VWCQPYEAC5MMX985</RequestId>
            <HostId>WmZ2NrcTLzim8v0z7S27BMmSRwdGVieLxDLsvBrojsyoPtkKEiFtEi7zLOWhpNUDa5LD7VtKPBE=</HostId>
            </Error>
    ServerError:
      description: >-
        The request was syntactically and semantically valid, but an error occurred while trying
        to act upon it
      content:
        application/json:
          schema:
            $ref: "./schemas.yaml#/components/schemas/exception"
          example:
            code: 500
            description: "Internal server error"
