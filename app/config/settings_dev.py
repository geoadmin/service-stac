"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import environ

from .settings_prod import *  # pylint: disable=wildcard-import, unused-wildcard-import

env = environ.Env()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)

# If set to True, this will enable logger.debug prints of the output of
# EXPLAIN.. ANALYZE of certain queries and the corresponding SQL statement.
DEBUG_ENABLE_DB_EXPLAIN_ANALYZE = env.bool('DEBUG_ENABLE_DB_EXPLAIN_ANALYZE', 'False')

if DEBUG:
    print('WARNING - running in debug mode !')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

ALLOWED_HOSTS = ['*']

# django-extensions
# ------------------------------------------------------------------------------
if DEBUG:
    INSTALLED_APPS += ['django_extensions', 'debug_toolbar']

if DEBUG:
    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ] + MIDDLEWARE

# configuration for debug_toolbar
# see https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html#debug-toolbar-config
DEBUG_TOOLBAR_CONFIG = {'SHOW_TOOLBAR_CALLBACK': 'middleware.debug.check_toolbar_env'}

# use the default staticfiles mechanism
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

if DEBUG:
    DEBUG_PROPAGATE_API_EXCEPTIONS = env.bool('DEBUG_PROPAGATE_API_EXCEPTIONS', 'False')

SHELL_PLUS_POST_IMPORTS = ['from tests.data_factory import Factory']

# Regex patterns of collections that should go to the managed bucket
MANAGED_BUCKET_COLLECTION_PATTERNS = env.list(
    'MANAGED_BUCKET_COLLECTION_PATTERNS', default=[r"^ch\.meteoschweiz\.ogd-*"]
)

# Since it's impossible to recreate the service-account situation with minio
# we inject some configuration in here to access the second bucket
# in the same way as first bucket, via access/secrets
# Like this we can leave the base (prod) configuration clean, while fixing
# the local setup
AWS_SETTINGS['managed']['access_type'] = "key"
AWS_SETTINGS['managed']['ACCESS_KEY_ID'] = env("LEGACY_AWS_ACCESS_KEY_ID")
AWS_SETTINGS['managed']['SECRET_ACCESS_KEY'] = env("LEGACY_AWS_SECRET_ACCESS_KEY")

# API Gateway integration PB-1009
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.RemoteUserBackend",
    # We keep ModelBackend as fallback until we have moved all users to Cognito.
    "django.contrib.auth.backends.ModelBackend",
]
MIDDLEWARE += [
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "middleware.apigw.ApiGatewayMiddleware",
]
# By default sessions expire after two weeks.
# Sessions are only useful for user tracking in the admin UI. For security
# reason we should expire these sessions as soon as possible. Given the use
# case, it seems reasonable to log out users after 8h of inactivity or whenever
# they restart their browser.
SESSION_COOKIE_AGE = 60 * 60 * 8
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_SECURE = True
