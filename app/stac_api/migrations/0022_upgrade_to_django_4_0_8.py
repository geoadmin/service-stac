# Generated by Django 4.0.8 on 2023-01-13 12:04

import pgtrigger.compiler
import pgtrigger.migrations

from django.db import migrations


class Migration(migrations.Migration):

    replaces = [
        ('stac_api', '0022_asset_update_asset_collection_summaries_trigger_and_more'),
    ]

    dependencies = [
        ('stac_api', '0021_auto_20220705_1452'),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Update related item auto variables\n        UPDATE stac_api_item SET\n            updated = now(),\n            etag = gen_random_uuid()\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% auto fields updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        -- Compute collection summaries\n        SELECT\n            item.collection_id,\n            array_remove(array_agg(DISTINCT(asset.proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(asset.geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(asset.geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(asset.eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM stac_api_item AS item\n            LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n        WHERE item.collection_id = related_collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='e0b29d0384d2f046d86a2855199f11680bfb5bef',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_collection_summaries_trigger_e9d6b',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Update related item auto variables\n        UPDATE stac_api_item SET\n            updated = now(),\n            etag = gen_random_uuid()\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% auto fields updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        -- Compute collection summaries\n        SELECT\n            item.collection_id,\n            array_remove(array_agg(DISTINCT(asset.proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(asset.geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(asset.geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(asset.eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM stac_api_item AS item\n            LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n        WHERE item.collection_id = related_collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='77c17dbfdc9db9b3a53a4c17c6fa41652b583f2d',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_asset_collection_summaries_trigger_1ecc2',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='919b8384c438cfda5c229bbd45bf105b9791107e',
                    operation='INSERT',
                    pgid='pgtrigger_add_asset_auto_variables_trigger_307cc',
                    table='stac_api_asset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='7bb0112e4ab34bc80f6557fdfe31e8c2b2391ea3',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_auto_variables_trigger_003e1',
                    table='stac_api_asset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='assetupload',
            trigger=pgtrigger.compiler.Trigger(
                name='add_asset_upload_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    '\n    -- update AssetUpload auto variable\n    NEW.etag = public.gen_random_uuid();\n\n    RETURN NEW;\n    ',
                    hash='a3a28294c617cb2bc808f4ae9b201a53d09a6fbb',
                    operation='INSERT',
                    pgid='pgtrigger_add_asset_upload_trigger_4e001',
                    table='stac_api_assetupload',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='assetupload',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_upload_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    '\n    -- update AssetUpload auto variable\n    NEW.etag = public.gen_random_uuid();\n\n    RETURN NEW;\n    ',
                    hash='c6ba181560243ba70d1bbe4d41e345574fd8bfa1',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_upload_trigger_b7543',
                    table='stac_api_assetupload',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collection',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='30eeaa9b6305b5811e712f217d8b040b449a9673',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_auto_variables_trigger_c2d7a',
                    table='stac_api_collection',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collection',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='dd09a84a5aea12fb534b46bf05019ff94d83b4dc',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_auto_variables_trigger_b9db3',
                    table='stac_api_collection',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionlink',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionLink.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='a9e4b3b60383ddb1c6d3f20210dffd061e2730f4',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_child_trigger_80513',
                    table='stac_api_collectionlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionlink',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionLink.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='a6bad0d5f447c34f993359c5fe494662079b3c36',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_child_trigger_8dac2',
                    table='stac_api_collectionlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionlink',
            trigger=pgtrigger.compiler.Trigger(
                name='del_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionLink.id=% updates.',\n        OLD.collection_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='4625f4043d97e73eb600b4479a64fa4726a79fc4',
                    operation='DELETE',
                    pgid='pgtrigger_del_collection_child_trigger_6b23f',
                    table='stac_api_collectionlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_item_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='b32010d88f414876d6587886719f336861448d3f',
                    operation='INSERT',
                    pgid='pgtrigger_add_item_auto_variables_trigger_09b8c',
                    table='stac_api_item',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='6a09ed74ce3c7330463d17f17b25034d2a096bde',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_auto_variables_trigger_ba1f6',
                    table='stac_api_item',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection extent\n        SELECT\n            item.collection_id,\n            ST_SetSRID(ST_EXTENT(item.geometry),4326) as extent_geometry,\n            MIN(LEAST(item.properties_datetime, item.properties_start_datetime)) as extent_start_datetime,\n            MAX(GREATEST(item.properties_datetime, item.properties_end_datetime)) as extent_end_datetime\n        INTO collection_extent\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + extent)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            extent_geometry = collection_extent.extent_geometry,\n            extent_start_datetime = collection_extent.extent_start_datetime,\n            extent_end_datetime = collection_extent.extent_end_datetime\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='eb4b65a8351403ead9a6ab10a743f5ce33f2c068',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_collection_extent_trigger_ba9d0',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection extent\n        SELECT\n            item.collection_id,\n            ST_SetSRID(ST_EXTENT(item.geometry),4326) as extent_geometry,\n            MIN(LEAST(item.properties_datetime, item.properties_start_datetime)) as extent_start_datetime,\n            MAX(GREATEST(item.properties_datetime, item.properties_end_datetime)) as extent_end_datetime\n        INTO collection_extent\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + extent)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            extent_geometry = collection_extent.extent_geometry,\n            extent_start_datetime = collection_extent.extent_start_datetime,\n            extent_end_datetime = collection_extent.extent_end_datetime\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='238a6ddb960423329f586fde5c6eca31b379ceae',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_item_collection_extent_trigger_840fe',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='itemlink',
            trigger=pgtrigger.compiler.Trigger(
                name='add_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child ItemLink.id=% updates.',\n        NEW.item_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='d23fe9da0b7759abc1115d57147512739eda90cb',
                    operation='INSERT',
                    pgid='pgtrigger_add_item_child_trigger_b0768',
                    table='stac_api_itemlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='itemlink',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child ItemLink.id=% updates.',\n        NEW.item_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='0ed165c633e28d5089a438ea1c6cf330f6a212d8',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_child_trigger_9b246',
                    table='stac_api_itemlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='itemlink',
            trigger=pgtrigger.compiler.Trigger(
                name='del_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child ItemLink.id=% updates.',\n        OLD.item_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='e088463716eeb61744134f9eee8f7ef358d90c4e',
                    operation='DELETE',
                    pgid='pgtrigger_del_item_child_trigger_5fbee',
                    table='stac_api_itemlink',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='provider',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Provider.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='1ab42ac15158020054635e84d3aac863ac703aa1',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_child_trigger_8557d',
                    table='stac_api_provider',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='provider',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Provider.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='23f3c4b50a329d15abf40312a20dd7218d0825ea',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_child_trigger_56605',
                    table='stac_api_provider',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='provider',
            trigger=pgtrigger.compiler.Trigger(
                name='del_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Provider.id=% updates.',\n        OLD.collection_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='844a712eda2d273e85c3d59c7ea1964ef5c83f75',
                    operation='DELETE',
                    pgid='pgtrigger_del_collection_child_trigger_76cd8',
                    table='stac_api_provider',
                    when='AFTER'
                )
            ),
        ),
    ]
