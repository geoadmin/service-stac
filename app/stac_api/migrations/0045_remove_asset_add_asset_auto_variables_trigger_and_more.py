# Generated by Django 5.0.7 on 2024-07-23 12:46

import pgtrigger.compiler
import pgtrigger.migrations

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('stac_api', '0044_alter_collectionlink_unique_together'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='add_asset_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='update_asset_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='update_asset_item_update_interval_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='update_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='add_del_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collection',
            name='add_collection_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collection',
            name='update_collection_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='update_col_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='add_del_col_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='add_col_asset_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='update_col_asset_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='add_item_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='update_item_auto_variables_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='update_item_collection_extent_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='add_del_item_collection_extent_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='update_item_collection_update_interval_trigger',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='4c46da2d506c09494f01801fe36d1c524948e28c',
                    operation='INSERT',
                    pgid='pgtrigger_add_asset_auto_variables_trigger_307cc',
                    table='stac_api_asset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='001908ae691c5c62db2f2745014dbb08517225fd',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_auto_variables_trigger_003e1',
                    table='stac_api_asset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child Asset.id=% updates.',\n        NEW.item_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='a83f367c2199aa354cd125c5a70ef18d2e9bd5e6',
                    operation='INSERT',
                    pgid='pgtrigger_add_item_child_trigger_f5309',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child Asset.id=% updates.',\n        NEW.item_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='10fc39b0efd656d0c627b9a68495da0cea43e83c',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_child_trigger_15ed4',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_item_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related item\n    UPDATE stac_api_item SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.item_id;\n\n    RAISE INFO 'Parent table item.id=% auto fields updated due to child Asset.id=% updates.',\n        OLD.item_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='14da48d9fcf293b19c542b655e0a78783192e547',
                    operation='DELETE',
                    pgid='pgtrigger_del_item_child_trigger_b403d',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition=
                    'WHEN (OLD.proj_epsg IS DISTINCT FROM NEW.proj_epsg OR\n                OLD.geoadmin_variant IS DISTINCT FROM NEW.geoadmin_variant OR\n                OLD.geoadmin_lang IS DISTINCT FROM NEW.geoadmin_lang OR\n                OLD.eo_gsd IS DISTINCT FROM NEW.eo_gsd)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_remove(array_agg(DISTINCT(proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM (\n                SELECT item.collection_id, asset.proj_epsg, asset.geoadmin_variant, asset.geoadmin_lang, asset.eo_gsd\n                FROM stac_api_item AS item\n                    LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n                WHERE collection_id = related_collection_id\n                UNION\n                SELECT collection_id, proj_epsg, NULL, NULL, NULL\n                FROM stac_api_collectionasset\n                WHERE collection_id = related_collection_id\n            ) a\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='86f6aded61b0924014f6b0012330b9fb5c26a4d9',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_collection_summaries_trigger_e9d6b',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_remove(array_agg(DISTINCT(proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM (\n                SELECT item.collection_id, asset.proj_epsg, asset.geoadmin_variant, asset.geoadmin_lang, asset.eo_gsd\n                FROM stac_api_item AS item\n                    LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n                WHERE collection_id = related_collection_id\n                UNION\n                SELECT collection_id, proj_epsg, NULL, NULL, NULL\n                FROM stac_api_collectionasset\n                WHERE collection_id = related_collection_id\n            ) a\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='100260cd02c8ee55f8a7b6adf627dd3ffed87249',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_asset_collection_summaries_trigger_1ecc2',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_item_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.update_interval IS DISTINCT FROM NEW.update_interval)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; item_update_interval RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute item update_interval (minimum aggregation of asset's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(asset.update_interval, -1)), -1) AS min_update_interval\n        INTO item_update_interval\n        FROM stac_api_asset AS asset\n        WHERE asset.item_id = asset_instance.item_id;\n\n        -- Update related item update_interval variables\n        UPDATE stac_api_item SET\n            update_interval = item_update_interval.min_update_interval\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% update_interval updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='da7656993d844256eb9c12dbd07bdee5fd528e29',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_item_update_interval_trigger_09e4d',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collection',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='7959f8ef3121e989f123d7862b8c7a684af547dc',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_auto_variables_trigger_c2d7a',
                    table='stac_api_collection',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collection',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='49ab220ec31f0c2373378d6ab6c2a2af0cd812de',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_auto_variables_trigger_b9db3',
                    table='stac_api_collection',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_col_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='8b6777e0054db6f990557b50703d396ad809fd7c',
                    operation='INSERT',
                    pgid='pgtrigger_add_col_asset_auto_variables_trigger_1ff98',
                    table='stac_api_collectionasset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_col_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='b3aeadded163df6fb90ee56764b13a025be8903c',
                    operation='UPDATE',
                    pgid='pgtrigger_update_col_asset_auto_variables_trigger_638a5',
                    table='stac_api_collectionasset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionAsset.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='c94584bf505595c4e96044a64206cc7d3c3844d8',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_child_trigger_3fed0',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionAsset.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='e4af0fb0f5e5bf1dc5fa531a528935293fbe372c',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_child_trigger_ae85d',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child CollectionAsset.id=% updates.',\n        OLD.collection_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='3430483e05ec8467a0889f968d003dad60043d64',
                    operation='DELETE',
                    pgid='pgtrigger_del_collection_child_trigger_5ecfc',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_col_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            a.collection_id,\n            array_remove(array_agg(DISTINCT(a.proj_epsg)), null) AS proj_epsg\n        INTO collection_summaries\n        FROM (\n            SELECT item.collection_id, asset.proj_epsg\n            FROM stac_api_item AS item\n                LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n            WHERE collection_id = asset_instance.collection_id\n            UNION\n            SELECT collection_id, proj_epsg\n            FROM stac_api_collectionasset\n            WHERE collection_id = asset_instance.collection_id\n        ) a\n        GROUP BY a.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            summaries_proj_epsg = collection_summaries.proj_epsg\n        WHERE id = asset_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to collection asset.name=% update.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='6fcba99099c7212fecdf3645a21f426f2a4e3225',
                    operation='UPDATE',
                    pgid='pgtrigger_update_col_asset_collection_summaries_trigger_34e34',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_col_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            a.collection_id,\n            array_remove(array_agg(DISTINCT(a.proj_epsg)), null) AS proj_epsg\n        INTO collection_summaries\n        FROM (\n            SELECT item.collection_id, asset.proj_epsg\n            FROM stac_api_item AS item\n                LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n            WHERE collection_id = asset_instance.collection_id\n            UNION\n            SELECT collection_id, proj_epsg\n            FROM stac_api_collectionasset\n            WHERE collection_id = asset_instance.collection_id\n        ) a\n        GROUP BY a.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            summaries_proj_epsg = collection_summaries.proj_epsg\n        WHERE id = asset_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to collection asset.name=% update.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='98afc01111e5be054b7ad9c127f645ab8b932a80',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_col_asset_collection_summaries_trigger_a88ca',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_item_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='86e0dd76a5f5d9596e2e9d363dbc0ca23cb2489e',
                    operation='INSERT',
                    pgid='pgtrigger_add_item_auto_variables_trigger_09b8c',
                    table='stac_api_item',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update auto variables\n    NEW.etag = gen_random_uuid();\n    NEW.updated = now();\n\n    RAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='2cbc29788513e6407ba74e63a2c53d2696ba3354',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_auto_variables_trigger_ba1f6',
                    table='stac_api_item',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Item.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='7e6d0a6b27c89f88fd9e991432922f4dd35d9675',
                    operation='INSERT',
                    pgid='pgtrigger_add_collection_child_trigger_b1293',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = NEW.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Item.id=% updates.',\n        NEW.collection_id, NEW.id;\n\n    RETURN NEW;\n    ",
                    hash='97f0b61b29e78046e6fd246ace355c8dde50f6be',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_child_trigger_c0533',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='del_collection_child_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n    -- update related collection\n    UPDATE stac_api_collection SET\n        updated = now(),\n        etag = public.gen_random_uuid()\n    WHERE id = OLD.collection_id;\n\n    RAISE INFO 'Parent table collection.id=% auto fields updated due to child Item.id=% updates.',\n        OLD.collection_id, OLD.id;\n\n    RETURN OLD;\n    ",
                    hash='61ff31acc5c285c72a3375f3ec04093edd7ea9f9',
                    operation='DELETE',
                    pgid='pgtrigger_del_collection_child_trigger_a4f01',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition=
                    'WHEN (NOT ST_EQUALS(OLD.geometry, NEW.geometry) OR\n                OLD.properties_start_datetime IS DISTINCT FROM NEW.properties_start_datetime OR\n                OLD.properties_end_datetime IS DISTINCT FROM NEW.properties_end_datetime OR\n                OLD.properties_datetime IS DISTINCT FROM NEW.properties_datetime)',
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection extent\n        SELECT\n            item.collection_id,\n            ST_SetSRID(ST_EXTENT(item.geometry),4326) as extent_geometry,\n            MIN(LEAST(item.properties_datetime, item.properties_start_datetime)) as extent_start_datetime,\n            MAX(GREATEST(item.properties_datetime, item.properties_end_datetime)) as extent_end_datetime\n        INTO collection_extent\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + extent)\n        UPDATE stac_api_collection SET\n            extent_geometry = collection_extent.extent_geometry,\n            extent_start_datetime = collection_extent.extent_start_datetime,\n            extent_end_datetime = collection_extent.extent_end_datetime\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='bbc8db9190bc3de9d93798453f076c9908947f1a',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_collection_extent_trigger_ba9d0',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection extent\n        SELECT\n            item.collection_id,\n            ST_SetSRID(ST_EXTENT(item.geometry),4326) as extent_geometry,\n            MIN(LEAST(item.properties_datetime, item.properties_start_datetime)) as extent_start_datetime,\n            MAX(GREATEST(item.properties_datetime, item.properties_end_datetime)) as extent_end_datetime\n        INTO collection_extent\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id\n        GROUP BY item.collection_id;\n\n        -- Update related collection (auto variables + extent)\n        UPDATE stac_api_collection SET\n            extent_geometry = collection_extent.extent_geometry,\n            extent_start_datetime = collection_extent.extent_start_datetime,\n            extent_end_datetime = collection_extent.extent_end_datetime\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='330594d6514122fd9b37ecae40278d0653adafb6',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_item_collection_extent_trigger_840fe',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_collection_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.update_interval IS DISTINCT FROM NEW.update_interval)',
                    declare=
                    'DECLARE item_instance stac_api_item%ROWTYPE; collection_update_interval RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection update_interval (minimum aggregation of item's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(item.update_interval, -1)), -1) AS min_update_interval\n        INTO collection_update_interval\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id;\n\n        -- Update related collection update_interval variables\n        UPDATE stac_api_collection SET\n            update_interval = collection_update_interval.min_update_interval\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% update_interval updated, due to item.name=% updates.',\n            item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='501a8642b3c80307e6a56cce21121670a772bc0f',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_collection_update_interval_trigger_0138c',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
    ]
