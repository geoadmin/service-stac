# Generated by Django 5.0.7 on 2024-07-24 14:28

import pgtrigger.compiler
import pgtrigger.migrations

from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [
        ('stac_api', '0047_prefill_counter_tables'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='update_item_collection_extent_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='item',
            name='add_del_item_collection_extent_trigger',
        ),
        migrations.AddField(
            model_name='collection',
            name='extent_out_of_sync',
            field=models.BooleanField(default=False),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition=
                    'WHEN (NOT ST_EQUALS(OLD.geometry, NEW.geometry) OR\n                OLD.properties_start_datetime IS DISTINCT FROM NEW.properties_start_datetime OR\n                OLD.properties_end_datetime IS DISTINCT FROM NEW.properties_end_datetime OR\n                OLD.properties_datetime IS DISTINCT FROM NEW.properties_datetime)',
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Update related collection extent_out_of_sync\n        UPDATE stac_api_collection SET\n            extent_out_of_sync = TRUE\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent_out_of_sync updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='65589c4043379ccb1052a43cb9e273d0268b4863',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_collection_extent_trigger_ba9d0',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_item_collection_extent_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare='DECLARE item_instance stac_api_item%ROWTYPE; collection_extent RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Update related collection extent_out_of_sync\n        UPDATE stac_api_collection SET\n            extent_out_of_sync = TRUE\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% extent_out_of_sync updated, due to item.name=% updates.', item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='f2c2d72d28621f2b438d73506d4763a828111507',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_item_collection_extent_trigger_840fe',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
    ]
