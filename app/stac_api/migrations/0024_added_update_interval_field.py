# Generated by Django 4.0.10 on 2023-03-01 15:39

import pgtrigger.compiler
import pgtrigger.migrations

import django.core.validators
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [
        ('stac_api', '0023_alter_asset_media_type'),
    ]

    operations = [
        migrations.AddField(
            model_name='asset',
            name='update_interval',
            field=models.IntegerField(
                default=-1,
                help_text=
                'Interval in seconds in which the asset data is updated.-1 means that the data is not on a regular basis updated.',
                validators=[django.core.validators.MinValueValidator(-1)]
            ),
        ),
        migrations.AddField(
            model_name='assetupload',
            name='update_interval',
            field=models.IntegerField(
                default=-1,
                help_text=
                'Interval in seconds in which the asset data is updated.-1 means that the data is not on a regular basis updated.This field can only be set via the API.',
                validators=[django.core.validators.MinValueValidator(-1)]
            ),
        ),
        migrations.AddField(
            model_name='collection',
            name='update_interval',
            field=models.IntegerField(
                default=-1,
                help_text=
                'Minimal update interval in seconds in which the underlying assets data are updated.',
                validators=[django.core.validators.MinValueValidator(-1)]
            ),
        ),
        migrations.AddField(
            model_name='item',
            name='update_interval',
            field=models.IntegerField(
                default=-1,
                help_text=
                'Minimal update interval in seconds in which the underlying assets data are updated.',
                validators=[django.core.validators.MinValueValidator(-1)]
            ),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['update_interval'], name='item_update_interval_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_asset_item_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; item_update_interval RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute item update_interval (minimum aggregation of asset's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(asset.update_interval, -1)), -1) AS min_update_interval\n        INTO item_update_interval\n        FROM stac_api_asset AS asset\n        WHERE asset.item_id = asset_instance.item_id;\n\n        -- Update related item update_interval variables\n        UPDATE stac_api_item SET\n            update_interval = item_update_interval.min_update_interval\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% update_interval updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='4489101822128d8d934da4095ec7dc7ec519e513',
                    operation='INSERT OR DELETE',
                    pgid='pgtrigger_add_del_asset_item_update_interval_trigger_60f97',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_item_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; item_update_interval RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute item update_interval (minimum aggregation of asset's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(asset.update_interval, -1)), -1) AS min_update_interval\n        INTO item_update_interval\n        FROM stac_api_asset AS asset\n        WHERE asset.item_id = asset_instance.item_id;\n\n        -- Update related item update_interval variables\n        UPDATE stac_api_item SET\n            update_interval = item_update_interval.min_update_interval\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% update_interval updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='25a75cbebd199bcd244573ca6b19e7d6ca037329',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_item_update_interval_trigger_09e4d',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_item_collection_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE item_instance stac_api_item%ROWTYPE; collection_update_interval RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection update_interval (minimum aggregation of item's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(item.update_interval, -1)), -1) AS min_update_interval\n        INTO collection_update_interval\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id;\n\n        -- Update related collection update_interval variables\n        UPDATE stac_api_collection SET\n            update_interval = collection_update_interval.min_update_interval\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% update_interval updated, due to item.name=% updates.',\n            item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='e01ce875910b61a27fe22f5657d98ef54101cc84',
                    operation='INSERT OR DELETE',
                    pgid='pgtrigger_add_del_item_collection_update_interval_trigger_95cea',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='item',
            trigger=pgtrigger.compiler.Trigger(
                name='update_item_collection_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE item_instance stac_api_item%ROWTYPE; collection_update_interval RECORD;',
                    func=
                    "\n        item_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection update_interval (minimum aggregation of item's update_interval)\n        SELECT\n            COALESCE(MIN(NULLIF(item.update_interval, -1)), -1) AS min_update_interval\n        INTO collection_update_interval\n        FROM stac_api_item AS item\n        WHERE item.collection_id = item_instance.collection_id;\n\n        -- Update related collection update_interval variables\n        UPDATE stac_api_collection SET\n            update_interval = collection_update_interval.min_update_interval\n        WHERE id = item_instance.collection_id;\n\n        RAISE INFO 'collection.id=% update_interval updated, due to item.name=% updates.',\n            item_instance.collection_id, item_instance.name;\n\n        RETURN item_instance;\n        ",
                    hash='ea802e87d77916b9ab54653c96f30d5e4cc7da64',
                    operation='UPDATE',
                    pgid='pgtrigger_update_item_collection_update_interval_trigger_0138c',
                    table='stac_api_item',
                    when='AFTER'
                )
            ),
        ),
    ]
