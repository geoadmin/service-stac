# Generated by Django 5.0.7 on 2024-07-25 11:44

import pgtrigger.compiler
import pgtrigger.migrations

import django.db.models.deletion
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    dependencies = [
        ('stac_api', '0045_remove_asset_add_asset_auto_variables_trigger_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='GeoadminLangCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField()),
                ('value', models.CharField(blank=True, default=None, max_length=2, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='GeoadminVariantCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField()),
                ('value', models.CharField(blank=True, max_length=25, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='GSDCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField()),
                ('value', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProjEPSGCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('count', models.PositiveIntegerField()),
                ('value', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='update_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='add_del_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='update_col_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='collectionasset',
            name='add_del_col_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_dec_eo_gsd_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.eo_gsd IS DISTINCT FROM NEW.eo_gsd)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_gsdcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.eo_gsd\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_gsdcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.eo_gsd;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='c0abdf6478b11df26621006d3d85f87de9a78254',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_dec_eo_gsd_trigger_3d90f',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_eo_gsd_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_gsdcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.eo_gsd\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_gsdcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.eo_gsd;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='b1e1a7eeae2c42712791b768c013ff2eb940ceca',
                    operation='DELETE',
                    pgid='pgtrigger_del_eo_gsd_trigger_ccfab',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_inc_eo_gsd_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.eo_gsd IS DISTINCT FROM NEW.eo_gsd)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_gsdcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.eo_gsd, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_gsdcount.count+1;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='cc910892519c55ade62515f1e2f465cd201fc004',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_inc_eo_gsd_trigger_b0c4f',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_eo_gsd_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_gsdcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.eo_gsd, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_gsdcount.count+1;\n\n        RAISE INFO\n            'gsdcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.eo_gsd, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='f1f6ae32d3a8e24b1e84ee3b0bd68069318374ad',
                    operation='INSERT',
                    pgid='pgtrigger_add_eo_gsd_trigger_1edd9',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_dec_geoadmin_lang_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.geoadmin_lang IS DISTINCT FROM NEW.geoadmin_lang)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_geoadminlangcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_lang\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_geoadminlangcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_lang;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='eb53b5d3779e072ac9407fd7c12e9ef39c2fc32a',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_dec_geoadmin_lang_trigger_81453',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_geoadmin_lang_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_geoadminlangcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_lang\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_geoadminlangcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_lang;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='e13d9892b4ca5fe755b4362456173f40ff3f3022',
                    operation='DELETE',
                    pgid='pgtrigger_del_geoadmin_lang_trigger_ad861',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_inc_geoadmin_lang_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.geoadmin_lang IS DISTINCT FROM NEW.geoadmin_lang)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_geoadminlangcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.geoadmin_lang, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_geoadminlangcount.count+1;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='f7929a6d9543b50033c0a937eb7c16e9908578aa',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_inc_geoadmin_lang_trigger_9db4d',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_geoadmin_lang_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_geoadminlangcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.geoadmin_lang, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_geoadminlangcount.count+1;\n\n        RAISE INFO\n            'geoadminlangcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_lang, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='5a9c17a0daa1626e28516898b6263f3a002cd052',
                    operation='INSERT',
                    pgid='pgtrigger_add_geoadmin_lang_trigger_b3618',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_dec_geoadmin_variant_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.geoadmin_variant IS DISTINCT FROM NEW.geoadmin_variant)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_geoadminvariantcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_variant\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_geoadminvariantcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_variant;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='f0983c2ae25051de27afb1bfbfea84769ec8e668',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_dec_geoadmin_variant_trigger_27787',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_geoadmin_variant_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_geoadminvariantcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_variant\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_geoadminvariantcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.geoadmin_variant;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='c215859478c4ea0c4c06e262a643a361503a605b',
                    operation='DELETE',
                    pgid='pgtrigger_del_geoadmin_variant_trigger_154b3',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_inc_geoadmin_variant_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.geoadmin_variant IS DISTINCT FROM NEW.geoadmin_variant)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_geoadminvariantcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.geoadmin_variant, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_geoadminvariantcount.count+1;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='ac9458a62158e23ca862a3a31f5617f240448f09',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_inc_geoadmin_variant_trigger_cff3e',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_geoadmin_variant_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_geoadminvariantcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.geoadmin_variant, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_geoadminvariantcount.count+1;\n\n        RAISE INFO\n            'geoadminvariantcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.geoadmin_variant, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='9b9ba06b57857980309045dd9ec952e1c217cd8f',
                    operation='INSERT',
                    pgid='pgtrigger_add_geoadmin_variant_trigger_57810',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_dec_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.proj_epsg IS DISTINCT FROM NEW.proj_epsg)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_projepsgcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_projepsgcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='911b3f6770b58628ef8455b43d1708d8b313ee60',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_dec_proj_epsg_trigger_17635',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_projepsgcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_projepsgcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='c8ca59334b8d2e5698647e3e14d7c88a77c601c7',
                    operation='DELETE',
                    pgid='pgtrigger_del_proj_epsg_trigger_c1652',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_inc_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.proj_epsg IS DISTINCT FROM NEW.proj_epsg)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_projepsgcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.proj_epsg, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_projepsgcount.count+1;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='434dc9845c9cbcec99df849538d9ad5f9ebc0e68',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_inc_proj_epsg_trigger_ce669',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        INSERT INTO stac_api_projepsgcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.proj_epsg, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_projepsgcount.count+1;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='d7205e9b55a149b605213fbb5ccf8ea933a3ab80',
                    operation='INSERT',
                    pgid='pgtrigger_add_proj_epsg_trigger_0dabc',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_dec_col_asset_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.proj_epsg IS DISTINCT FROM NEW.proj_epsg)',
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = asset_instance.collection_id;\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_projepsgcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_projepsgcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg;\n\n        RAISE INFO\n            'stac_api_projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'stac_api_projepsgcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='a33f229db686c752feba9cfc14cbb56c5da4f661',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_dec_col_asset_proj_epsg_trigger_07a9d',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='del_col_asset_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = OLD;\n\n        related_collection_id = asset_instance.collection_id;\n\n        -- Remove entry when count will reach 0\n        DELETE FROM stac_api_projepsgcount\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg\n            AND count = 1;\n\n        IF NOT FOUND THEN\n        UPDATE stac_api_projepsgcount\n        SET count = count-1\n        WHERE collection_id = related_collection_id\n            AND value = asset_instance.proj_epsg;\n\n        RAISE INFO\n            'stac_api_projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        END IF;\n\n        RAISE INFO\n            'stac_api_projepsgcount (collection_id, value) (% %) deleted, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='f91be6ccd7b114a0af54a5f9e2ccddfa9b407c41',
                    operation='DELETE',
                    pgid='pgtrigger_del_col_asset_proj_epsg_trigger_2caf1',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='upd_inc_col_asset_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.proj_epsg IS DISTINCT FROM NEW.proj_epsg)',
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = asset_instance.collection_id;\n\n        INSERT INTO stac_api_projepsgcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.proj_epsg, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_projepsgcount.count+1;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='ed4d191d94d13103af5691ea3ec7219084a6ae6e',
                    operation='UPDATE',
                    pgid='pgtrigger_upd_inc_col_asset_proj_epsg_trigger_d717d',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_col_asset_proj_epsg_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; related_collection_id INT;',
                    func=
                    "\n        asset_instance = NEW;\n\n        related_collection_id = asset_instance.collection_id;\n\n        INSERT INTO stac_api_projepsgcount (collection_id, value, count)\n        VALUES (related_collection_id, asset_instance.proj_epsg, 1)\n        ON CONFLICT (collection_id, value)\n        DO UPDATE SET count = stac_api_projepsgcount.count+1;\n\n        RAISE INFO\n            'projepsgcount (collection_id, value) (% %) count updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.proj_epsg, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='6baab6bc6a59e9da667cf6e28a8a749421132913',
                    operation='INSERT',
                    pgid='pgtrigger_add_col_asset_proj_epsg_trigger_e0d9a',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        migrations.AddField(
            model_name='geoadminlangcount',
            name='collection',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac_api.collection'
            ),
        ),
        migrations.AddField(
            model_name='geoadminvariantcount',
            name='collection',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac_api.collection'
            ),
        ),
        migrations.AddField(
            model_name='gsdcount',
            name='collection',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac_api.collection'
            ),
        ),
        migrations.AddField(
            model_name='projepsgcount',
            name='collection',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac_api.collection'
            ),
        ),
        migrations.AlterUniqueTogether(
            name='geoadminlangcount',
            unique_together={('collection', 'value')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='geoadminlangcount',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_geoadminlangcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NOT (OLD.count > 1 AND NEW.count > 1))',
                    declare=
                    'DECLARE count_instance stac_api_geoadminlangcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_geoadminlangcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_geoadmin_lang = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='9da89d58c33616677b4643f9172ed475e519f9ff',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_geoadminlangcount_trigger_c6238',
                    table='stac_api_geoadminlangcount',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='geoadminlangcount',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_collection_geoadminlangcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE count_instance stac_api_geoadminlangcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_geoadminlangcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_geoadmin_lang = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='db83d5283bef965aedb338bcc808f79094226087',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_collection_geoadminlangcount_trigger_a0b35',
                    table='stac_api_geoadminlangcount',
                    when='AFTER'
                )
            ),
        ),
        migrations.AlterUniqueTogether(
            name='geoadminvariantcount',
            unique_together={('collection', 'value')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='geoadminvariantcount',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_geoadminvariantcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NOT (OLD.count > 1 AND NEW.count > 1))',
                    declare=
                    'DECLARE count_instance stac_api_geoadminvariantcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_geoadminvariantcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_geoadmin_variant = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='bd9d58a77ce093be6c0ddf9c92ac13acfa527458',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_geoadminvariantcount_trigger_ecbe8',
                    table='stac_api_geoadminvariantcount',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='geoadminvariantcount',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_collection_geoadminvariantcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE count_instance stac_api_geoadminvariantcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_geoadminvariantcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_geoadmin_variant = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='327c273a8581ada65b0198fece8c96e1a5b5d220',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_collection_geoadminvariantcount_trigger_935be',
                    table='stac_api_geoadminvariantcount',
                    when='AFTER'
                )
            ),
        ),
        migrations.AlterUniqueTogether(
            name='gsdcount',
            unique_together={('collection', 'value')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gsdcount',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_gsdcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NOT (OLD.count > 1 AND NEW.count > 1))',
                    declare=
                    'DECLARE count_instance stac_api_gsdcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_gsdcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_eo_gsd = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='c8475b40e3500cf8779eeb52a95c2a9ae6cabf9b',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_gsdcount_trigger_acb67',
                    table='stac_api_gsdcount',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gsdcount',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_collection_gsdcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE count_instance stac_api_gsdcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_gsdcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_eo_gsd = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='51c72738683a184279c251cd16d53da8d8af5df3',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_collection_gsdcount_trigger_6c5cf',
                    table='stac_api_gsdcount',
                    when='AFTER'
                )
            ),
        ),
        migrations.AlterUniqueTogether(
            name='projepsgcount',
            unique_together={('collection', 'value')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='projepsgcount',
            trigger=pgtrigger.compiler.Trigger(
                name='update_collection_projepsgcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NOT (OLD.count > 1 AND NEW.count > 1))',
                    declare=
                    'DECLARE count_instance stac_api_projepsgcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_projepsgcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_proj_epsg = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='117b672ee03f1d4f1508326f954877b8e8b29653',
                    operation='UPDATE',
                    pgid='pgtrigger_update_collection_projepsgcount_trigger_fff5a',
                    table='stac_api_projepsgcount',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='projepsgcount',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_collection_projepsgcount_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE count_instance stac_api_projepsgcount%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        count_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_agg(value) AS values\n        INTO collection_summaries\n        FROM stac_api_projepsgcount\n        WHERE count > 0 AND value IS NOT NULL AND collection_id = count_instance.collection_id\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection\n        SET summaries_proj_epsg = COALESCE(collection_summaries.values, '{}')\n        WHERE id = count_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated',\n            count_instance.collection_id;\n        RETURN count_instance;\n        ",
                    hash='5761d9d91c720e90b30136b6ed5d6ad1e80a96e3',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_collection_projepsgcount_trigger_33ef9',
                    table='stac_api_projepsgcount',
                    when='AFTER'
                )
            ),
        ),
    ]
