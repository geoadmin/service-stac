# Generated by Django 5.0.7 on 2024-07-16 14:36

import pgtrigger.compiler
import pgtrigger.migrations

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations
from django.db import models

import stac_api.models.general
import stac_api.validators


class Migration(migrations.Migration):

    dependencies = [
        ('stac_api', '0035_asset_roles'),
    ]

    operations = [
        migrations.CreateModel(
            name='CollectionAsset',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                (
                    'name',
                    models.CharField(
                        max_length=255,
                        validators=[stac_api.validators.validate_asset_name],
                        verbose_name='id'
                    )
                ),
                (
                    'file',
                    stac_api.models.general.DynamicStorageFileField(
                        max_length=255, upload_to=stac_api.models.general.upload_asset_to_path_hook
                    )
                ),
                (
                    'roles',
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=None,
                        help_text=
                        'Comma-separated list of roles to describe the purpose of the asset',
                        null=True,
                        size=None
                    )
                ),
                (
                    'checksum_multihash',
                    models.CharField(
                        blank=True, default=None, editable=False, max_length=255, null=True
                    )
                ),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('proj_epsg', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                (
                    'media_type',
                    models.CharField(
                        choices=[
                            (
                                'application/vnd.apache.parquet',
                                'Apache Parquet column-oriented data file format (application/vnd.apache.parquet)'
                            ),
                            (
                                'application/x.ascii-grid+zip',
                                'Zipped ESRI ASCII raster format (.asc) (application/x.ascii-grid+zip)'
                            ),
                            (
                                'application/x.ascii-xyz+zip',
                                'Zipped XYZ (.xyz) (application/x.ascii-xyz+zip)'
                            ), ('application/x.e00+zip', 'Zipped e00 (application/x.e00+zip)'),
                            (
                                'application/x.geotiff+zip',
                                'Zipped GeoTIFF (application/x.geotiff+zip)'
                            ),
                            (
                                'image/tiff; application=geotiff',
                                'GeoTIFF (image/tiff; application=geotiff)'
                            ), ('application/x.tiff+zip', 'Zipped TIFF (application/x.tiff+zip)'),
                            ('application/x.png+zip', 'Zipped PNG (application/x.png+zip)'),
                            ('application/x.jpeg+zip', 'Zipped JPEG (application/x.jpeg+zip)'),
                            (
                                'application/vnd.google-earth.kml+xml',
                                'KML (application/vnd.google-earth.kml+xml)'
                            ),
                            (
                                'application/vnd.google-earth.kmz',
                                'Zipped KML (application/vnd.google-earth.kmz)'
                            ), ('application/x.dxf+zip', 'Zipped DXF (application/x.dxf+zip)'),
                            ('application/gml+xml', 'GML (application/gml+xml)'),
                            ('application/x.gml+zip', 'Zipped GML (application/x.gml+zip)'),
                            ('application/vnd.las', 'LIDAR (application/vnd.las)'),
                            ('application/vnd.laszip', 'Zipped LIDAR (application/vnd.laszip)'),
                            (
                                'application/x.shapefile+zip',
                                'Zipped Shapefile (application/x.shapefile+zip)'
                            ),
                            (
                                'application/x.filegdb+zip',
                                'Zipped File Geodatabase (application/x.filegdb+zip)'
                            ),
                            (
                                'application/x.filegdbp+zip',
                                'Zipped File Geodatabase (ArcGIS Pro) (application/x.filegdbp+zip)'
                            ),
                            (
                                'application/x.ms-access+zip',
                                'Zipped Personal Geodatabase (application/x.ms-access+zip)'
                            ),
                            (
                                'application/x.ms-excel+zip',
                                'Zipped Excel (application/x.ms-excel+zip)'
                            ),
                            ('application/x.tab+zip', 'Zipped Mapinfo-TAB (application/x.tab+zip)'),
                            (
                                'application/x.tab-raster+zip',
                                'Zipped Mapinfo-Raster-TAB (application/x.tab-raster+zip)'
                            ), ('application/x.csv+zip', 'Zipped CSV (application/x.csv+zip)'),
                            ('text/csv', 'CSV (text/csv)'),
                            (
                                'application/geopackage+sqlite3',
                                'Geopackage (application/geopackage+sqlite3)'
                            ),
                            (
                                'application/x.geopackage+zip',
                                'Zipped Geopackage (application/x.geopackage+zip)'
                            ), ('application/geo+json', 'GeoJSON (application/geo+json)'),
                            (
                                'application/x.geojson+zip',
                                'Zipped GeoJSON (application/x.geojson+zip)'
                            ),
                            (
                                'application/x.interlis; version=2.3',
                                'Interlis 2 (application/x.interlis; version=2.3)'
                            ),
                            (
                                'application/x.interlis+zip; version=2.3',
                                'Zipped XTF (2.3) (application/x.interlis+zip; version=2.3)'
                            ),
                            (
                                'application/x.interlis; version=2.4',
                                'Interlis 2 (application/x.interlis; version=2.4)'
                            ),
                            (
                                'application/x.interlis+zip; version=2.4',
                                'Zipped XTF (2.4) (application/x.interlis+zip; version=2.4)'
                            ),
                            (
                                'application/x.interlis; version=1',
                                'Interlis 1 (application/x.interlis; version=1)'
                            ),
                            (
                                'application/x.interlis+zip; version=1',
                                'Zipped ITF (application/x.interlis+zip; version=1)'
                            ),
                            (
                                'image/tiff; application=geotiff; profile=cloud-optimized',
                                'Cloud Optimized GeoTIFF (COG) (image/tiff; application=geotiff; profile=cloud-optimized)'
                            ), ('application/pdf', 'PDF (application/pdf)'),
                            ('application/x.pdf+zip', 'Zipped PDF (application/x.pdf+zip)'),
                            ('application/json', 'JSON (application/json)'),
                            ('application/x.json+zip', 'Zipped JSON (application/x.json+zip)'),
                            ('application/x-netcdf', 'NetCDF (application/x-netcdf)'), (
                                'application/x.netcdf+zip',
                                'Zipped NetCDF (application/x.netcdf+zip)'
                            ), ('application/xml', 'XML (application/xml)'),
                            ('application/x.xml+zip', 'Zipped XML (application/x.xml+zip)'),
                            (
                                'application/vnd.mapbox-vector-tile',
                                'mbtiles (application/vnd.mapbox-vector-tile)'
                            ), ('text/plain', 'Text (text/plain)'),
                            ('text/x.plain+zip', 'Zipped text (text/x.plain+zip)'),
                            ('application/x.dwg+zip', 'Zipped DWG (application/x.dwg+zip)'),
                            ('application/zip', 'Generic Zip File (application/zip)'),
                            ('image/tiff', 'TIFF (image/tiff)'),
                            ('image/jpeg', 'JPEG (image/jpeg)'), ('image/png', 'PNG (image/png)'),
                            ('application/vnd.sqlite3', 'sqlite (application/vnd.sqlite3)')
                        ],
                        help_text=
                        "This media type will be used as <em>Content-Type</em> header for the asset's object upon upload.</br></br><b>WARNING: when updating the Media Type, the asset's object Content-Type header is not automatically updated, it needs to be uploaded again.</b>",
                        max_length=200
                    )
                ),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                (
                    'etag',
                    models.CharField(
                        default=stac_api.models.general.compute_etag, editable=False, max_length=56
                    )
                ),
                (
                    'update_interval',
                    models.IntegerField(
                        default=-1,
                        help_text=
                        'Interval in seconds in which the asset data is updated.-1 means that the data is not on a regular basis updated.',
                        validators=[django.core.validators.MinValueValidator(-1)]
                    )
                ),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='update_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='asset',
            name='add_del_asset_collection_summaries_trigger',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Update related item auto variables\n        UPDATE stac_api_item SET\n            updated = now(),\n            etag = gen_random_uuid()\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% auto fields updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_remove(array_agg(DISTINCT(proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM (\n                SELECT item.collection_id, asset.proj_epsg, asset.geoadmin_variant, asset.geoadmin_lang, asset.eo_gsd\n                FROM stac_api_item AS item\n                    LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n                WHERE collection_id = related_collection_id\n                UNION\n                SELECT collection_id, proj_epsg, NULL, NULL, NULL\n                FROM stac_api_collectionasset\n                WHERE collection_id = related_collection_id\n            ) a\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='a80e39387d72b34d342949430da55798684b66ea',
                    operation='UPDATE',
                    pgid='pgtrigger_update_asset_collection_summaries_trigger_e9d6b',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='asset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_asset%ROWTYPE; related_collection_id INT; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        related_collection_id = (\n            SELECT collection_id FROM stac_api_item\n            WHERE id = asset_instance.item_id\n        );\n\n        -- Update related item auto variables\n        UPDATE stac_api_item SET\n            updated = now(),\n            etag = gen_random_uuid()\n        WHERE id = asset_instance.item_id;\n\n        RAISE INFO 'item.id=% auto fields updated, due to asset.name=% updates.',\n            asset_instance.item_id, asset_instance.name;\n\n        -- Compute collection summaries\n        SELECT\n            collection_id,\n            array_remove(array_agg(DISTINCT(proj_epsg)), null) AS proj_epsg,\n            array_remove(array_agg(DISTINCT(geoadmin_variant)), null) AS geoadmin_variant,\n            array_remove(array_agg(DISTINCT(geoadmin_lang)), null) AS geoadmin_lang,\n            array_remove(array_agg(DISTINCT(eo_gsd)), null) AS eo_gsd\n        INTO collection_summaries\n        FROM (\n                SELECT item.collection_id, asset.proj_epsg, asset.geoadmin_variant, asset.geoadmin_lang, asset.eo_gsd\n                FROM stac_api_item AS item\n                    LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n                WHERE collection_id = related_collection_id\n                UNION\n                SELECT collection_id, proj_epsg, NULL, NULL, NULL\n                FROM stac_api_collectionasset\n                WHERE collection_id = related_collection_id\n            ) a\n        GROUP BY collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg,\n            summaries_geoadmin_variant = collection_summaries.geoadmin_variant,\n            summaries_geoadmin_lang = collection_summaries.geoadmin_lang,\n            summaries_eo_gsd = collection_summaries.eo_gsd\n        WHERE id = related_collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to asset.name=% update.',\n            related_collection_id, asset_instance.name;\n\n        RETURN asset_instance;\n        ",
                    hash='f7b4382b3099ddeb515f44919ee082f04352f892',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_asset_collection_summaries_trigger_1ecc2',
                    table='stac_api_asset',
                    when='AFTER'
                )
            ),
        ),
        migrations.AddField(
            model_name='collectionasset',
            name='collection',
            field=models.ForeignKey(
                help_text=
                '\n    <div class=SearchUsage>\n        Search Usage:\n        <ul>\n            <li>\n                <i>arg</i> will make a non exact search checking if <i>>arg</i>\n                is part of the Item path\n            </li>\n            <li>\n                Multiple <i>arg</i>  can be used, separated by spaces. This will search\n                for all elements containing all arguments in their path\n            </li>\n            <li>\n                <i>"collectionID/itemID"</i> will make an exact search for the specified item.\n             </li>\n        </ul>\n        Examples :\n        <ul>\n            <li>\n                Searching for <i>pixelkarte</i> will return all items which have\n                pixelkarte as a part of either their collection ID or their item ID\n            </li>\n            <li>\n                Searching for <i>pixelkarte 2016 4</i> will return all items\n                which have pixelkarte, 2016 AND 4 as part of their collection ID or\n                item ID\n            </li>\n            <li>\n                Searching for <i>"ch.swisstopo.pixelkarte.example/item2016-4-example"</i>\n                will yield only this item, if this item exists.\n            </li>\n        </ul>\n    </div>',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='assets',
                related_query_name='asset',
                to='stac_api.collection'
            ),
        ),
        migrations.AlterUniqueTogether(
            name='collectionasset',
            unique_together={('collection', 'name')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_col_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            a.collection_id,\n            array_remove(array_agg(DISTINCT(a.proj_epsg)), null) AS proj_epsg\n        INTO collection_summaries\n        FROM (\n            SELECT item.collection_id, asset.proj_epsg\n            FROM stac_api_item AS item\n                LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n            WHERE collection_id = asset_instance.collection_id\n            UNION\n            SELECT collection_id, proj_epsg\n            FROM stac_api_collectionasset\n            WHERE collection_id = asset_instance.collection_id\n        ) a\n        GROUP BY a.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg\n        WHERE id = asset_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to collection asset.name=% update.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='3a8baa495546ff51bcf342113cade80804549cc4',
                    operation='UPDATE',
                    pgid='pgtrigger_update_col_asset_collection_summaries_trigger_34e34',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_col_asset_collection_summaries_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare=
                    'DECLARE asset_instance stac_api_collectionasset%ROWTYPE; collection_summaries RECORD;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n\n        -- Compute collection summaries\n        SELECT\n            a.collection_id,\n            array_remove(array_agg(DISTINCT(a.proj_epsg)), null) AS proj_epsg\n        INTO collection_summaries\n        FROM (\n            SELECT item.collection_id, asset.proj_epsg\n            FROM stac_api_item AS item\n                LEFT JOIN stac_api_asset AS asset ON (asset.item_id = item.id)\n            WHERE collection_id = asset_instance.collection_id\n            UNION\n            SELECT collection_id, proj_epsg\n            FROM stac_api_collectionasset\n            WHERE collection_id = asset_instance.collection_id\n        ) a\n        GROUP BY a.collection_id;\n\n        -- Update related collection (auto variables + summaries)\n        UPDATE stac_api_collection SET\n            updated = now(),\n            etag = gen_random_uuid(),\n            summaries_proj_epsg = collection_summaries.proj_epsg\n        WHERE id = asset_instance.collection_id;\n\n        RAISE INFO 'collection.id=% summaries updated, due to collection asset.name=% update.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='aca7376bd514cc28ea1f61f231b9d532497455f0',
                    operation='DELETE OR INSERT',
                    pgid='pgtrigger_add_del_col_asset_collection_summaries_trigger_a88ca',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_col_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='caa8f13b3b32bc25881698030f60fb2b6b603d2f',
                    operation='INSERT',
                    pgid='pgtrigger_add_col_asset_auto_variables_trigger_1ff98',
                    table='stac_api_collectionasset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_col_asset_auto_variables_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    func=
                    "\n-- update auto variables\nNEW.etag = gen_random_uuid();\nNEW.updated = now();\n\nRAISE INFO 'Updated auto fields of %.id=% due to table updates.', TG_TABLE_NAME, NEW.id;\n\nRETURN NEW;\n",
                    hash='124f20bb51cd51d84120989687ce6d71db0229fd',
                    operation='UPDATE',
                    pgid='pgtrigger_update_col_asset_auto_variables_trigger_638a5',
                    table='stac_api_collectionasset',
                    when='BEFORE'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='add_del_col_asset_col_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    declare='DECLARE asset_instance stac_api_collectionasset%ROWTYPE;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n        -- Update related collection update_interval variables\n        -- if new value is lower than existing one.\n        UPDATE stac_api_collection SET\n            update_interval = COALESCE(LEAST(NULLIF(asset_instance.update_interval, -1), update_interval), -1)\n        WHERE id = asset_instance.collection_id;\n        RAISE INFO 'collection.id=% update_interval updated, due to collectionasset.name=% updates.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='f5a11056a640069405a53403ed75d78078b81a67',
                    operation='INSERT OR DELETE',
                    pgid='pgtrigger_add_del_col_asset_col_update_interval_trigger_0e93d',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='collectionasset',
            trigger=pgtrigger.compiler.Trigger(
                name='update_col_asset_col_update_interval_trigger',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)',
                    declare='DECLARE asset_instance stac_api_collectionasset%ROWTYPE;',
                    func=
                    "\n        asset_instance = COALESCE(NEW, OLD);\n        -- Update related collection update_interval variables\n        -- if new value is lower than existing one.\n        UPDATE stac_api_collection SET\n            update_interval = COALESCE(LEAST(NULLIF(asset_instance.update_interval, -1), update_interval), -1)\n        WHERE id = asset_instance.collection_id;\n        RAISE INFO 'collection.id=% update_interval updated, due to collectionasset.name=% updates.',\n            asset_instance.collection_id, asset_instance.name;\n        RETURN asset_instance;\n        ",
                    hash='36c45262ae1c548a00b1e97ff994dc55b9827a8b',
                    operation='UPDATE',
                    pgid='pgtrigger_update_col_asset_col_update_interval_trigger_c992d',
                    table='stac_api_collectionasset',
                    when='AFTER'
                )
            ),
        ),
    ]
